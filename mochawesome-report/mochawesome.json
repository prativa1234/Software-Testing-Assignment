{
  "stats": {
    "suites": 6,
    "tests": 55,
    "passes": 39,
    "pending": 0,
    "failures": 16,
    "start": "2024-12-04T18:34:42.843Z",
    "end": "2024-12-04T18:34:42.859Z",
    "duration": 16,
    "testsRegistered": 55,
    "passPercent": 70.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eea4ea65-907e-44e8-af77-c71b83a577e6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "77599261-e2d0-4367-9456-0230b1b1e72e",
          "title": "add.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 10 for add(6, 4)",
              "fullTitle": "add.js should return 10 for add(6, 4)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, 4)).to.equal(10);",
              "err": {},
              "uuid": "3b8d2750-a085-412f-8a01-3b74aac5bec3",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for add(0, 0)",
              "fullTitle": "add.js should return 0 for add(0, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 0)).to.equal(0);",
              "err": {},
              "uuid": "1ac2d105-2df1-4b52-832a-a3da0db00d3e",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "add.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-5, -3)).to.equal(-8);",
              "err": {},
              "uuid": "cd341761-4056-4105-8805-8f139a247614",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct value when adding positive and negative numbers",
              "fullTitle": "add.js should return correct value when adding positive and negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10, -5)).to.equal(5);",
              "err": {},
              "uuid": "3eacd03a-670f-40e3-b403-d7354c4982b1",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "add.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5, 2.5)).to.equal(4.0);",
              "err": {},
              "uuid": "d2413584-544d-4618-8636-50f333790021",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "add.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1000000000, 2000000000)).to.equal(3000000000);",
              "err": {},
              "uuid": "ffc25958-fa31-42d3-9d55-7075310c0ec4",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the other number when one argument is 0",
              "fullTitle": "add.js should return the other number when one argument is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 5)).to.equal(5);\nexpect(add(10, 0)).to.equal(10);",
              "err": {},
              "uuid": "2fc977f0-6184-4910-ab52-ae60308683e5",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return concatenated strings if one or both arguments are strings",
              "fullTitle": "add.js should return concatenated strings if one or both arguments are strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(\"6\", 4)).to.equal(\"64\");\nexpect(add(6, \"4\")).to.equal(\"64\");\nexpect(add(\"6\", \"4\")).to.equal(\"64\");",
              "err": {},
              "uuid": "2de2ff6d-7bd5-4aa7-932d-7a5a0281e10c",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the argument value if only one argument is provided",
              "fullTitle": "add.js should return the argument value if only one argument is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(5)).to.equal(5);\nexpect(add(undefined, 4)).to.equal(4);",
              "err": {},
              "uuid": "ca26a65f-bacb-4563-80c0-173ed113de01",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if no arguments are provided",
              "fullTitle": "add.js should return 0 if no arguments are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.equal(0);",
              "err": {},
              "uuid": "c8413c9b-924d-4511-9d50-0952d9d22033",
              "parentUUID": "77599261-e2d0-4367-9456-0230b1b1e72e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b8d2750-a085-412f-8a01-3b74aac5bec3",
            "1ac2d105-2df1-4b52-832a-a3da0db00d3e",
            "cd341761-4056-4105-8805-8f139a247614",
            "3eacd03a-670f-40e3-b403-d7354c4982b1",
            "d2413584-544d-4618-8636-50f333790021",
            "ffc25958-fa31-42d3-9d55-7075310c0ec4",
            "2fc977f0-6184-4910-ab52-ae60308683e5",
            "2de2ff6d-7bd5-4aa7-932d-7a5a0281e10c",
            "ca26a65f-bacb-4563-80c0-173ed113de01",
            "c8413c9b-924d-4511-9d50-0952d9d22033"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ae584514-f474-4d38-abf7-2a1426d17462",
          "title": "compact.js - Remove false values from arrays",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js",
          "file": "/test/compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove null and undefined values",
              "fullTitle": "compact.js - Remove false values from arrays should remove null and undefined values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [null, 'Snacks', undefined];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Snacks']);  // Corrected to match compact.js behavior",
              "err": {
                "message": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]",
                "estack": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:9:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- []\n+ [\n+   \"Snacks\"\n+ ]\n"
              },
              "uuid": "2ce72118-17ce-49d0-94dd-00022fa7594b",
              "parentUUID": "ae584514-f474-4d38-abf7-2a1426d17462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the array unchanged if there are no false values",
              "fullTitle": "compact.js - Remove false values from arrays should return the array unchanged if there are no false values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['Drinks', 'Vegan'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Drinks', 'Vegan']);  // Ensured input order is unchanged",
              "err": {
                "message": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]",
                "estack": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:15:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"Drinks\"\n   \"Vegan\"\n ]\n"
              },
              "uuid": "734d6f9c-0abe-4181-8f00-2d7970acb914",
              "parentUUID": "ae584514-f474-4d38-abf7-2a1426d17462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove empty strings from the array",
              "fullTitle": "compact.js - Remove false values from arrays should remove empty strings from the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [' ', 'Non-GMO', 'Snacks'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Non-GMO', 'Snacks']);  // Empty string removed correctly",
              "err": {},
              "uuid": "7228ce48-ac79-4353-ab88-fa7842e38316",
              "parentUUID": "ae584514-f474-4d38-abf7-2a1426d17462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not remove 'false' and 0 from the array",
              "fullTitle": "compact.js - Remove false values from arrays should not remove 'false' and 0 from the array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['false', 'zero', 'Organic'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['false', 'zero', 'Organic']);  // 'false' and 'zero' are strings, not falsy values",
              "err": {
                "message": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]",
                "estack": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:27:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"false\"\n   \"zero\"\n   \"Organic\"\n ]\n"
              },
              "uuid": "ca82bd2e-dd94-45d9-bd7c-e047b6858350",
              "parentUUID": "ae584514-f474-4d38-abf7-2a1426d17462",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when input is empty",
              "fullTitle": "compact.js - Remove false values from arrays should return an empty array when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = compact(input);\nexpect(result).to.deep.equal([]);  // Empty input should return an empty array",
              "err": {},
              "uuid": "15695125-c5bc-4950-b2c1-c3cdb7411cf8",
              "parentUUID": "ae584514-f474-4d38-abf7-2a1426d17462",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7228ce48-ac79-4353-ab88-fa7842e38316",
            "15695125-c5bc-4950-b2c1-c3cdb7411cf8"
          ],
          "failures": [
            "2ce72118-17ce-49d0-94dd-00022fa7594b",
            "734d6f9c-0abe-4181-8f00-2d7970acb914",
            "ca82bd2e-dd94-45d9-bd7c-e047b6858350"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6db0ab5-af58-4c45-a489-2b3abf4b5a33",
          "title": "countBy.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should count the occurrences of specific attribute values",
              "fullTitle": "countBy.js should count the occurrences of specific attribute values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: \"barney\", active: true },\n    { user: \"betty\", active: true },\n    { user: \"fred\", active: false },\n];\nconst result = countBy(users, (value) => value.active.toString());  // Ensure boolean is treated as string\nexpect(result).to.deep.equal({ \"true\": 2, \"false\": 1 });",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:14:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "b4f25333-570a-46ea-a927-ab38f966b679",
              "parentUUID": "a6db0ab5-af58-4c45-a489-2b3abf4b5a33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the number if number is valid",
              "fullTitle": "countBy.js should return the number if number is valid",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1.8, 2.2, 3.3, 2.4];\nconst result = countBy(numbers, (value) => Math.floor(value));\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:21:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "f6ef8875-86c5-4562-a37f-327a5a582509",
              "parentUUID": "a6db0ab5-af58-4c45-a489-2b3abf4b5a33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert valid numeric strings into their correct numeric value",
              "fullTitle": "countBy.js should convert valid numeric strings into their correct numeric value",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const values = [\"1.8\", \"2.2\", \"3.3\", \"2.4\"];\nconst result = countBy(values, (value) => Math.floor(Number(value))); // Convert string to number first\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:28:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "6809ddbc-c260-41e7-aab6-7ee565658957",
              "parentUUID": "a6db0ab5-af58-4c45-a489-2b3abf4b5a33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with duplicate values",
              "fullTitle": "countBy.js should handle arrays with duplicate values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 2, 3, 3, 3];\nconst result = countBy(numbers, (value) => value.toString());  // Ensure numbers are treated as strings\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 3 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:35:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 2\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 3\n }\n"
              },
              "uuid": "f405cd8a-d1e1-4b3e-a24b-5fc53a45b4ca",
              "parentUUID": "a6db0ab5-af58-4c45-a489-2b3abf4b5a33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid collection input",
              "fullTitle": "countBy.js should throw an error for invalid collection input",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => countBy(null, (value) => value)).to.throw();\nexpect(() => countBy(undefined, (value) => value)).to.throw();\nexpect(() => countBy(\"not a collection\", (value) => value)).to.throw();",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:40:63)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "ebe8f106-7297-400d-b2e1-7b3d4a9e8f39",
              "parentUUID": "a6db0ab5-af58-4c45-a489-2b3abf4b5a33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty object for an empty array",
              "fullTitle": "countBy.js should return an empty object for an empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = countBy([], (value) => value);\nexpect(result).to.deep.equal({});",
              "err": {},
              "uuid": "4723e7b3-afee-4927-acdf-a8203da65236",
              "parentUUID": "a6db0ab5-af58-4c45-a489-2b3abf4b5a33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid iteratee",
              "fullTitle": "countBy.js should throw an error for invalid iteratee",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nexpect(() => countBy(input, null)).to.throw();\nexpect(() => countBy(input, undefined)).to.throw();",
              "err": {},
              "uuid": "63cd14a7-4658-4f9b-b51e-3a6fd0f3af50",
              "parentUUID": "a6db0ab5-af58-4c45-a489-2b3abf4b5a33",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4723e7b3-afee-4927-acdf-a8203da65236",
            "63cd14a7-4658-4f9b-b51e-3a6fd0f3af50"
          ],
          "failures": [
            "b4f25333-570a-46ea-a927-ab38f966b679",
            "f6ef8875-86c5-4562-a37f-327a5a582509",
            "6809ddbc-c260-41e7-aab6-7ee565658957",
            "f405cd8a-d1e1-4b3e-a24b-5fc53a45b4ca",
            "ebe8f106-7297-400d-b2e1-7b3d4a9e8f39"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
          "title": "divide.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js",
          "file": "/test/divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1.5 for divide(6, 4)",
              "fullTitle": "divide.js should return 1.5 for divide(6, 4)",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, 4)).to.equal(1.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.5",
                "estack": "AssertionError: expected 1 to equal 1.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:6:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 1.5\n"
              },
              "uuid": "31209c25-1e3b-46d0-b027-cf30ccfce4fe",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 2 for divide(10, 5)",
              "fullTitle": "divide.js should return 2 for divide(10, 5)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 5)).to.equal(2);",
              "err": {
                "message": "AssertionError: expected 1 to equal 2",
                "estack": "AssertionError: expected 1 to equal 2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:10:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 2\n"
              },
              "uuid": "f6a2495f-50c4-4817-bd01-8f852a1c04ae",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for divide(10, 0)",
              "fullTitle": "divide.js should return NaN for divide(10, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 0)).to.be.NaN;",
              "err": {},
              "uuid": "17827029-a2ab-4018-b097-d967e5328b50",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "divide.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(-10, 5)).to.equal(-2);\nexpect(divide(10, -5)).to.equal(-2);",
              "err": {
                "message": "AssertionError: expected 1 to equal -2",
                "estack": "AssertionError: expected 1 to equal -2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:18:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ -2\n"
              },
              "uuid": "ee4238db-9257-4b13-8642-a4210555261b",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "divide.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(7.5, 2.5)).to.equal(3);",
              "err": {
                "message": "AssertionError: expected 1 to equal 3",
                "estack": "AssertionError: expected 1 to equal 3\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:23:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 3\n"
              },
              "uuid": "ca2063aa-999f-4d7b-85e4-f72f27f23dc3",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when dividend is 0",
              "fullTitle": "divide.js should return 0 when dividend is 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(0, 5)).to.equal(0);",
              "err": {
                "message": "AssertionError: expected 1 to equal +0",
                "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:27:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "16af1f76-ecbf-43bd-9d97-42af7f6f9400",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "divide.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(1000000000, 2000000000)).to.equal(0.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 0.5",
                "estack": "AssertionError: expected 1 to equal 0.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:31:51)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0.5\n"
              },
              "uuid": "723b35bb-1d29-4f28-9299-15e74758d5a3",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error or return NaN for invalid inputs",
              "fullTitle": "divide.js should throw an error or return NaN for invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => divide(\"6\", 4)).to.throw(); // If input validation exists\nexpect(divide(\"6\", 4)).to.be.NaN;       // If input validation doesn’t exist\nexpect(divide(6, \"4\")).to.be.NaN;\nexpect(divide(\"6\", \"4\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:35:46)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "fc211d1a-7116-4845-bbb2-8544af65f9a7",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 for divide(1, 1)",
              "fullTitle": "divide.js should return 1 for divide(1, 1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(1, 1)).to.equal(1);",
              "err": {},
              "uuid": "537945ac-5a13-4c04-bd92-251fd89813d1",
              "parentUUID": "eddad50e-3d34-4189-b8c9-7b717e056cb8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17827029-a2ab-4018-b097-d967e5328b50",
            "537945ac-5a13-4c04-bd92-251fd89813d1"
          ],
          "failures": [
            "31209c25-1e3b-46d0-b027-cf30ccfce4fe",
            "f6a2495f-50c4-4817-bd01-8f852a1c04ae",
            "ee4238db-9257-4b13-8642-a4210555261b",
            "ca2063aa-999f-4d7b-85e4-f72f27f23dc3",
            "16af1f76-ecbf-43bd-9d97-42af7f6f9400",
            "723b35bb-1d29-4f28-9299-15e74758d5a3",
            "fc211d1a-7116-4845-bbb2-8544af65f9a7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56decc12-ccec-4a1d-b39b-3962eba0a293",
          "title": "isDate.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a valid Date object",
              "fullTitle": "isDate.js should return true for a valid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date());\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "c302dd99-f1c7-4b4c-ae06-7708b76928df",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string that looks like a date",
              "fullTitle": "isDate.js should return false for a string that looks like a date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(\"Mon April 23 2012\");\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "ef109db6-e7dd-4130-bd63-ccf5303d0574",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a timestamp number",
              "fullTitle": "isDate.js should return false for a timestamp number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(1659394800000); // Example timestamp\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "992208b2-9895-4dac-902b-48714e208aa5",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null or undefined",
              "fullTitle": "isDate.js should return false for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;\nexpect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "4e4202db-cf6a-4193-aed1-4bd5836d8104",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for plain objects",
              "fullTitle": "isDate.js should return false for plain objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate({ year: 2023, month: 12, day: 1 });\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "b804aca1-4d0d-4328-8683-7497aa69a048",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for arrays",
              "fullTitle": "isDate.js should return false for arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate([\"2023-12-01\"]);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "f69f3417-3dce-422d-99e3-c67ce81cba76",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an invalid Date object",
              "fullTitle": "isDate.js should return true for an invalid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date(\"invalid date\"));\nexpect(result).to.be.true; // It's still a Date object, even if it's invalid.",
              "err": {},
              "uuid": "516f007b-6fff-4f7b-9fa7-f0dc9b329859",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle custom Date-like objects",
              "fullTitle": "isDate.js should handle custom Date-like objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const customDate = { toString: () => \"[object Date]\" };\nconst result = isDate(customDate);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "24358ca9-ceb0-4451-a342-f8241f785658",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with other object types",
              "fullTitle": "isDate.js should handle edge cases with other object types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Map())).to.be.false;\nexpect(isDate(new Set())).to.be.false;",
              "err": {},
              "uuid": "aeda5ef8-5b08-45f3-97f1-02334fa56091",
              "parentUUID": "56decc12-ccec-4a1d-b39b-3962eba0a293",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c302dd99-f1c7-4b4c-ae06-7708b76928df",
            "ef109db6-e7dd-4130-bd63-ccf5303d0574",
            "992208b2-9895-4dac-902b-48714e208aa5",
            "4e4202db-cf6a-4193-aed1-4bd5836d8104",
            "b804aca1-4d0d-4328-8683-7497aa69a048",
            "f69f3417-3dce-422d-99e3-c67ce81cba76",
            "516f007b-6fff-4f7b-9fa7-f0dc9b329859",
            "24358ca9-ceb0-4451-a342-f8241f785658",
            "aeda5ef8-5b08-45f3-97f1-02334fa56091"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
          "title": "toNumber.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the same number for numeric input",
              "fullTitle": "toNumber.js should return the same number for numeric input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(3.2)).to.equal(3.2);\nexpect(toNumber(Number.MIN_VALUE)).to.equal(5e-324);\nexpect(toNumber(Infinity)).to.equal(Infinity);\nexpect(toNumber(0)).to.equal(0);",
              "err": {},
              "uuid": "9eee45fd-b980-4c92-8732-b1a9ffa837c5",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse numeric strings correctly",
              "fullTitle": "toNumber.js should parse numeric strings correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"3.2\")).to.equal(3.2);\nexpect(toNumber(\"  42  \")).to.equal(42); // Leading/trailing whitespace",
              "err": {},
              "uuid": "721f7c3d-b8ce-4a38-be73-004cd0930501",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric strings",
              "fullTitle": "toNumber.js should return NaN for non-numeric strings",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"abc\")).to.be.NaN;\nexpect(toNumber(\"123abc\")).to.be.NaN;\nexpect(toNumber(\"\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected +0 to be NaN",
                "estack": "AssertionError: expected +0 to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js:20:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "474eacf0-68e2-43f2-97d6-ca95f10df37e",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle binary strings",
              "fullTitle": "toNumber.js should handle binary strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0b101\")).to.equal(5); // Binary representation",
              "err": {},
              "uuid": "ef5a862a-c37e-475b-8bb0-b2bc9ca57337",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle octal strings",
              "fullTitle": "toNumber.js should handle octal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0o10\")).to.equal(8); // Octal representation",
              "err": {},
              "uuid": "36c5157e-6a0c-49a9-bf7e-948087b91146",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle hexadecimal strings",
              "fullTitle": "toNumber.js should handle hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1f\")).to.equal(31); // Hexadecimal representation",
              "err": {},
              "uuid": "c7311bf4-b119-48d4-99c9-382eb9a2ba25",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid hexadecimal strings",
              "fullTitle": "toNumber.js should return NaN for invalid hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1g\")).to.be.NaN; // Invalid hexadecimal",
              "err": {},
              "uuid": "42a700cb-a816-4473-811c-095d5ba9501b",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for symbols",
              "fullTitle": "toNumber.js should return NaN for symbols",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(Symbol(\"symbol\"))).to.be.NaN;",
              "err": {},
              "uuid": "ac6df3c9-d3ee-493b-b5ee-e310fb2ec91c",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects with valueOf method",
              "fullTitle": "toNumber.js should handle objects with valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = {\n    valueOf: () => 42\n};\nexpect(toNumber(obj)).to.equal(42);",
              "err": {},
              "uuid": "cab729b7-5da6-499a-b30d-e6b608d73e25",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects without valueOf method",
              "fullTitle": "toNumber.js should handle objects without valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1 };\nexpect(toNumber(obj)).to.be.NaN;",
              "err": {},
              "uuid": "0a5f346e-85d1-4fb0-a09e-fc578cf11cd5",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays",
              "fullTitle": "toNumber.js should handle arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([42])).to.equal(42); // Single-element array\nexpect(toNumber([1, 2])).to.be.NaN; // Multi-element array",
              "err": {},
              "uuid": "0586dcdc-714b-46b7-add0-8e5ec361042e",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for null or undefined",
              "fullTitle": "toNumber.js should return NaN for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(null)).to.equal(0); // Special case: null is coerced to 0\nexpect(toNumber(undefined)).to.be.NaN;",
              "err": {},
              "uuid": "2fc0fe3b-510e-4aba-b008-a95003f06f0c",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with `0`",
              "fullTitle": "toNumber.js should handle edge cases with `0`",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(0)).to.equal(0); // 0 should remain 0\nexpect(toNumber(-0)).to.equal(-0); // -0 should remain -0",
              "err": {},
              "uuid": "02cf53e6-779e-4459-808a-143f9449fed8",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty objects gracefully",
              "fullTitle": "toNumber.js should handle empty objects gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber({})).to.be.NaN;",
              "err": {},
              "uuid": "6621e048-8e16-4a96-a33e-77b4d47a3520",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers in strings",
              "fullTitle": "toNumber.js should handle very large numbers in strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"1e+30\")).to.equal(1e30); // Scientific notation",
              "err": {},
              "uuid": "c799d095-5609-400c-8416-2888c723fe4c",
              "parentUUID": "4e430c16-7f8f-4019-ac91-78bedbcd1316",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9eee45fd-b980-4c92-8732-b1a9ffa837c5",
            "721f7c3d-b8ce-4a38-be73-004cd0930501",
            "ef5a862a-c37e-475b-8bb0-b2bc9ca57337",
            "36c5157e-6a0c-49a9-bf7e-948087b91146",
            "c7311bf4-b119-48d4-99c9-382eb9a2ba25",
            "42a700cb-a816-4473-811c-095d5ba9501b",
            "ac6df3c9-d3ee-493b-b5ee-e310fb2ec91c",
            "cab729b7-5da6-499a-b30d-e6b608d73e25",
            "0a5f346e-85d1-4fb0-a09e-fc578cf11cd5",
            "0586dcdc-714b-46b7-add0-8e5ec361042e",
            "2fc0fe3b-510e-4aba-b008-a95003f06f0c",
            "02cf53e6-779e-4459-808a-143f9449fed8",
            "6621e048-8e16-4a96-a33e-77b4d47a3520",
            "c799d095-5609-400c-8416-2888c723fe4c"
          ],
          "failures": [
            "474eacf0-68e2-43f2-97d6-ca95f10df37e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}