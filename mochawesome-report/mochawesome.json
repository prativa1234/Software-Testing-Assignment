{
  "stats": {
    "suites": 6,
    "tests": 55,
    "passes": 39,
    "pending": 0,
    "failures": 16,
    "start": "2024-12-04T19:09:44.708Z",
    "end": "2024-12-04T19:09:44.724Z",
    "duration": 16,
    "testsRegistered": 55,
    "passPercent": 70.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "60356333-2e32-4cce-9e8b-59039593424d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
          "title": "add.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 10 for add(6, 4)",
              "fullTitle": "add.js should return 10 for add(6, 4)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, 4)).to.equal(10);",
              "err": {},
              "uuid": "cbcbe83b-6d90-413d-ae1d-09e6e9c56928",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for add(0, 0)",
              "fullTitle": "add.js should return 0 for add(0, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 0)).to.equal(0);",
              "err": {},
              "uuid": "a1c6498c-2c76-45eb-963f-7730f39ef606",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "add.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-5, -3)).to.equal(-8);",
              "err": {},
              "uuid": "8a3875cd-63e8-4442-8ea6-e20eaab4793d",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct value when adding positive and negative numbers",
              "fullTitle": "add.js should return correct value when adding positive and negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10, -5)).to.equal(5);",
              "err": {},
              "uuid": "c3bdddc5-473b-4e24-874c-cd476d0f4632",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "add.js should handle decimals",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5, 2.5)).to.equal(4.0);",
              "err": {},
              "uuid": "5043a51a-ccbf-4c24-a705-b33de9210284",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "add.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1000000000, 2000000000)).to.equal(3000000000);",
              "err": {},
              "uuid": "57e428be-6ae8-450b-9098-068f39e36fa7",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the other number when one argument is 0",
              "fullTitle": "add.js should return the other number when one argument is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 5)).to.equal(5);\nexpect(add(10, 0)).to.equal(10);",
              "err": {},
              "uuid": "9d074b31-e2ac-4c7f-9636-30baedb2b18d",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return concatenated strings if one or both arguments are strings",
              "fullTitle": "add.js should return concatenated strings if one or both arguments are strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(\"6\", 4)).to.equal(\"64\");\nexpect(add(6, \"4\")).to.equal(\"64\");\nexpect(add(\"6\", \"4\")).to.equal(\"64\");",
              "err": {},
              "uuid": "9177f173-f737-45cf-ac33-7d221812a1e4",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the argument value if only one argument is provided",
              "fullTitle": "add.js should return the argument value if only one argument is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(5)).to.equal(5);\nexpect(add(undefined, 4)).to.equal(4);",
              "err": {},
              "uuid": "e42afc6e-8ffd-4d60-bb5a-7fe17f85934c",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if no arguments are provided",
              "fullTitle": "add.js should return 0 if no arguments are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.equal(0);",
              "err": {},
              "uuid": "ba79d2b4-d451-4b54-9bf1-641d9345d9e5",
              "parentUUID": "e1ce9f64-580a-47a2-acfd-f8e4e2fdbd0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbcbe83b-6d90-413d-ae1d-09e6e9c56928",
            "a1c6498c-2c76-45eb-963f-7730f39ef606",
            "8a3875cd-63e8-4442-8ea6-e20eaab4793d",
            "c3bdddc5-473b-4e24-874c-cd476d0f4632",
            "5043a51a-ccbf-4c24-a705-b33de9210284",
            "57e428be-6ae8-450b-9098-068f39e36fa7",
            "9d074b31-e2ac-4c7f-9636-30baedb2b18d",
            "9177f173-f737-45cf-ac33-7d221812a1e4",
            "e42afc6e-8ffd-4d60-bb5a-7fe17f85934c",
            "ba79d2b4-d451-4b54-9bf1-641d9345d9e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "435a0481-233b-4895-bce6-364921e15d30",
          "title": "compact.js - Remove false values from arrays",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js",
          "file": "/test/compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove null and undefined values",
              "fullTitle": "compact.js - Remove false values from arrays should remove null and undefined values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [null, 'Snacks', undefined];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Snacks']);  // Corrected to match compact.js behavior",
              "err": {
                "message": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]",
                "estack": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:9:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- []\n+ [\n+   \"Snacks\"\n+ ]\n"
              },
              "uuid": "e8b78273-efa2-4f81-bc73-7aea6fdf28e3",
              "parentUUID": "435a0481-233b-4895-bce6-364921e15d30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the array unchanged if there are no false values",
              "fullTitle": "compact.js - Remove false values from arrays should return the array unchanged if there are no false values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['Drinks', 'Vegan'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Drinks', 'Vegan']);  // Ensured input order is unchanged",
              "err": {
                "message": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]",
                "estack": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:15:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"Drinks\"\n   \"Vegan\"\n ]\n"
              },
              "uuid": "5cd1cb3c-1125-4e5e-a632-4e2370eb6a98",
              "parentUUID": "435a0481-233b-4895-bce6-364921e15d30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove empty strings from the array",
              "fullTitle": "compact.js - Remove false values from arrays should remove empty strings from the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [' ', 'Non-GMO', 'Snacks'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Non-GMO', 'Snacks']);  // Empty string removed correctly",
              "err": {},
              "uuid": "4f999bd6-d4c5-4658-82bf-de618c09aa93",
              "parentUUID": "435a0481-233b-4895-bce6-364921e15d30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not remove 'false' and 0 from the array",
              "fullTitle": "compact.js - Remove false values from arrays should not remove 'false' and 0 from the array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['false', 'zero', 'Organic'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['false', 'zero', 'Organic']);  // 'false' and 'zero' are strings, not falsy values",
              "err": {
                "message": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]",
                "estack": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:27:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"false\"\n   \"zero\"\n   \"Organic\"\n ]\n"
              },
              "uuid": "fda80465-9ece-45b3-9af5-d920e6e3759d",
              "parentUUID": "435a0481-233b-4895-bce6-364921e15d30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when input is empty",
              "fullTitle": "compact.js - Remove false values from arrays should return an empty array when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = compact(input);\nexpect(result).to.deep.equal([]);  // Empty input should return an empty array",
              "err": {},
              "uuid": "79a6ec5e-3762-49d2-b9fe-3e98e36275a5",
              "parentUUID": "435a0481-233b-4895-bce6-364921e15d30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f999bd6-d4c5-4658-82bf-de618c09aa93",
            "79a6ec5e-3762-49d2-b9fe-3e98e36275a5"
          ],
          "failures": [
            "e8b78273-efa2-4f81-bc73-7aea6fdf28e3",
            "5cd1cb3c-1125-4e5e-a632-4e2370eb6a98",
            "fda80465-9ece-45b3-9af5-d920e6e3759d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b203bfa3-be03-49ec-85c8-086b5f9e4b15",
          "title": "countBy.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should count the occurrences of specific attribute values",
              "fullTitle": "countBy.js should count the occurrences of specific attribute values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: \"barney\", active: true },\n    { user: \"betty\", active: true },\n    { user: \"fred\", active: false },\n];\nconst result = countBy(users, (value) => value.active.toString());  // Ensure boolean is treated as string\nexpect(result).to.deep.equal({ \"true\": 2, \"false\": 1 });",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:14:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "34d7fef8-899a-4e3f-98fd-5411561e9aee",
              "parentUUID": "b203bfa3-be03-49ec-85c8-086b5f9e4b15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the number if number is valid",
              "fullTitle": "countBy.js should return the number if number is valid",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1.8, 2.2, 3.3, 2.4];\nconst result = countBy(numbers, (value) => Math.floor(value));\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:21:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "230639ba-4185-4d59-96d8-79d8b2039fe5",
              "parentUUID": "b203bfa3-be03-49ec-85c8-086b5f9e4b15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert valid numeric strings into their correct numeric value",
              "fullTitle": "countBy.js should convert valid numeric strings into their correct numeric value",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const values = [\"1.8\", \"2.2\", \"3.3\", \"2.4\"];\nconst result = countBy(values, (value) => Math.floor(Number(value))); // Convert string to number first\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:28:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "f547fa77-0622-403b-b6e4-1621af296086",
              "parentUUID": "b203bfa3-be03-49ec-85c8-086b5f9e4b15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with duplicate values",
              "fullTitle": "countBy.js should handle arrays with duplicate values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 2, 3, 3, 3];\nconst result = countBy(numbers, (value) => value.toString());  // Ensure numbers are treated as strings\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 3 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:35:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 2\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 3\n }\n"
              },
              "uuid": "c370e182-9e09-46c5-90da-befa6c698ccf",
              "parentUUID": "b203bfa3-be03-49ec-85c8-086b5f9e4b15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid collection input",
              "fullTitle": "countBy.js should throw an error for invalid collection input",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => countBy(null, (value) => value)).to.throw();\nexpect(() => countBy(undefined, (value) => value)).to.throw();\nexpect(() => countBy(\"not a collection\", (value) => value)).to.throw();",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:40:63)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "1bf2d6ad-d332-451e-aad3-1fabdf98fe5d",
              "parentUUID": "b203bfa3-be03-49ec-85c8-086b5f9e4b15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty object for an empty array",
              "fullTitle": "countBy.js should return an empty object for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = countBy([], (value) => value);\nexpect(result).to.deep.equal({});",
              "err": {},
              "uuid": "756aaedf-f46a-44b1-99a6-6c33bc40658b",
              "parentUUID": "b203bfa3-be03-49ec-85c8-086b5f9e4b15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid iteratee",
              "fullTitle": "countBy.js should throw an error for invalid iteratee",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nexpect(() => countBy(input, null)).to.throw();\nexpect(() => countBy(input, undefined)).to.throw();",
              "err": {},
              "uuid": "498df325-36e9-4820-813f-affc4534acb9",
              "parentUUID": "b203bfa3-be03-49ec-85c8-086b5f9e4b15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "756aaedf-f46a-44b1-99a6-6c33bc40658b",
            "498df325-36e9-4820-813f-affc4534acb9"
          ],
          "failures": [
            "34d7fef8-899a-4e3f-98fd-5411561e9aee",
            "230639ba-4185-4d59-96d8-79d8b2039fe5",
            "f547fa77-0622-403b-b6e4-1621af296086",
            "c370e182-9e09-46c5-90da-befa6c698ccf",
            "1bf2d6ad-d332-451e-aad3-1fabdf98fe5d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "983243ca-afbf-45e9-b2bb-48407512b7df",
          "title": "divide.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js",
          "file": "/test/divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1.5 for divide(6, 4)",
              "fullTitle": "divide.js should return 1.5 for divide(6, 4)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, 4)).to.equal(1.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.5",
                "estack": "AssertionError: expected 1 to equal 1.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:6:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 1.5\n"
              },
              "uuid": "f30005ca-ef4a-462b-86b2-eca3fb8138c7",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 2 for divide(10, 5)",
              "fullTitle": "divide.js should return 2 for divide(10, 5)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 5)).to.equal(2);",
              "err": {
                "message": "AssertionError: expected 1 to equal 2",
                "estack": "AssertionError: expected 1 to equal 2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:10:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 2\n"
              },
              "uuid": "073da71b-5038-4004-b637-1d4b5e980012",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for divide(10, 0)",
              "fullTitle": "divide.js should return NaN for divide(10, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 0)).to.be.NaN;",
              "err": {},
              "uuid": "1f8343d9-a2f6-45f6-b05e-82c9af7c6e81",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "divide.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(-10, 5)).to.equal(-2);\nexpect(divide(10, -5)).to.equal(-2);",
              "err": {
                "message": "AssertionError: expected 1 to equal -2",
                "estack": "AssertionError: expected 1 to equal -2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:18:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ -2\n"
              },
              "uuid": "c0be5f1b-a209-4d2b-ad2b-39fb7c6fb01a",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "divide.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(7.5, 2.5)).to.equal(3);",
              "err": {
                "message": "AssertionError: expected 1 to equal 3",
                "estack": "AssertionError: expected 1 to equal 3\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:23:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 3\n"
              },
              "uuid": "9e627924-0812-412b-be8d-61f1a7176cfa",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when dividend is 0",
              "fullTitle": "divide.js should return 0 when dividend is 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(0, 5)).to.equal(0);",
              "err": {
                "message": "AssertionError: expected 1 to equal +0",
                "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:27:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "59706ece-d884-4a72-a76e-e83414b28073",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "divide.js should handle large numbers",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(1000000000, 2000000000)).to.equal(0.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 0.5",
                "estack": "AssertionError: expected 1 to equal 0.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:31:51)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0.5\n"
              },
              "uuid": "5f32226d-4e6e-4e60-b50c-e60c706b583f",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error or return NaN for invalid inputs",
              "fullTitle": "divide.js should throw an error or return NaN for invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => divide(\"6\", 4)).to.throw(); // If input validation exists\nexpect(divide(\"6\", 4)).to.be.NaN;       // If input validation doesn’t exist\nexpect(divide(6, \"4\")).to.be.NaN;\nexpect(divide(\"6\", \"4\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:35:46)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "478ee434-17f1-4a62-90df-c637135e3cc5",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 for divide(1, 1)",
              "fullTitle": "divide.js should return 1 for divide(1, 1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(1, 1)).to.equal(1);",
              "err": {},
              "uuid": "43954049-7af4-4367-bb1b-44094d474983",
              "parentUUID": "983243ca-afbf-45e9-b2bb-48407512b7df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f8343d9-a2f6-45f6-b05e-82c9af7c6e81",
            "43954049-7af4-4367-bb1b-44094d474983"
          ],
          "failures": [
            "f30005ca-ef4a-462b-86b2-eca3fb8138c7",
            "073da71b-5038-4004-b637-1d4b5e980012",
            "c0be5f1b-a209-4d2b-ad2b-39fb7c6fb01a",
            "9e627924-0812-412b-be8d-61f1a7176cfa",
            "59706ece-d884-4a72-a76e-e83414b28073",
            "5f32226d-4e6e-4e60-b50c-e60c706b583f",
            "478ee434-17f1-4a62-90df-c637135e3cc5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd150a51-983b-442a-b5cb-8cd3ba272026",
          "title": "isDate.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a valid Date object",
              "fullTitle": "isDate.js should return true for a valid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date());\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "63b8e7e9-ee3f-4b42-a4db-5bb5dc11f164",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string that looks like a date",
              "fullTitle": "isDate.js should return false for a string that looks like a date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(\"Mon April 23 2012\");\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "6481158a-9c36-4baf-a07c-6d0506f404c5",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a timestamp number",
              "fullTitle": "isDate.js should return false for a timestamp number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(1659394800000); // Example timestamp\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "40cd28d8-8286-48cb-a451-0719f44907f9",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null or undefined",
              "fullTitle": "isDate.js should return false for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;\nexpect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "eae2cfe2-4f38-4ba4-8c62-14f3979bea3e",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for plain objects",
              "fullTitle": "isDate.js should return false for plain objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate({ year: 2023, month: 12, day: 1 });\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "2107fa69-cf26-40d1-bab7-0bbaac405d27",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for arrays",
              "fullTitle": "isDate.js should return false for arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate([\"2023-12-01\"]);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "1123fc46-43e2-4b89-b1d3-6378d0f9f28c",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an invalid Date object",
              "fullTitle": "isDate.js should return true for an invalid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date(\"invalid date\"));\nexpect(result).to.be.true; // It's still a Date object, even if it's invalid.",
              "err": {},
              "uuid": "619422ca-08cd-4726-a771-42ad37ae760a",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle custom Date-like objects",
              "fullTitle": "isDate.js should handle custom Date-like objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const customDate = { toString: () => \"[object Date]\" };\nconst result = isDate(customDate);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "6e47f06e-c829-414b-9b97-0d929d17957d",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with other object types",
              "fullTitle": "isDate.js should handle edge cases with other object types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Map())).to.be.false;\nexpect(isDate(new Set())).to.be.false;",
              "err": {},
              "uuid": "192719f5-897e-4551-a7db-132d1d65a4fe",
              "parentUUID": "fd150a51-983b-442a-b5cb-8cd3ba272026",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "63b8e7e9-ee3f-4b42-a4db-5bb5dc11f164",
            "6481158a-9c36-4baf-a07c-6d0506f404c5",
            "40cd28d8-8286-48cb-a451-0719f44907f9",
            "eae2cfe2-4f38-4ba4-8c62-14f3979bea3e",
            "2107fa69-cf26-40d1-bab7-0bbaac405d27",
            "1123fc46-43e2-4b89-b1d3-6378d0f9f28c",
            "619422ca-08cd-4726-a771-42ad37ae760a",
            "6e47f06e-c829-414b-9b97-0d929d17957d",
            "192719f5-897e-4551-a7db-132d1d65a4fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "07be11d6-2df4-4965-837b-deeab86d2746",
          "title": "toNumber.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the same number for numeric input",
              "fullTitle": "toNumber.js should return the same number for numeric input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(3.2)).to.equal(3.2);\nexpect(toNumber(Number.MIN_VALUE)).to.equal(5e-324);\nexpect(toNumber(Infinity)).to.equal(Infinity);\nexpect(toNumber(0)).to.equal(0);",
              "err": {},
              "uuid": "06b1b6a9-fe19-4b40-8559-935e971bd301",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse numeric strings correctly",
              "fullTitle": "toNumber.js should parse numeric strings correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"3.2\")).to.equal(3.2);\nexpect(toNumber(\"  42  \")).to.equal(42); // Leading/trailing whitespace",
              "err": {},
              "uuid": "f7bdbe2a-9977-4289-9a8f-f0961dafb2a3",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric strings",
              "fullTitle": "toNumber.js should return NaN for non-numeric strings",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"abc\")).to.be.NaN;\nexpect(toNumber(\"123abc\")).to.be.NaN;\nexpect(toNumber(\"\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected +0 to be NaN",
                "estack": "AssertionError: expected +0 to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js:20:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "429ea504-d4d4-41c3-a801-b1b0a8b4133a",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle binary strings",
              "fullTitle": "toNumber.js should handle binary strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0b101\")).to.equal(5); // Binary representation",
              "err": {},
              "uuid": "186ea1d3-7c34-4363-953d-b85a015b02dd",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle octal strings",
              "fullTitle": "toNumber.js should handle octal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0o10\")).to.equal(8); // Octal representation",
              "err": {},
              "uuid": "1890d5b3-5202-4193-91ec-34175780d700",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle hexadecimal strings",
              "fullTitle": "toNumber.js should handle hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1f\")).to.equal(31); // Hexadecimal representation",
              "err": {},
              "uuid": "57c5776b-9686-42b3-b5ec-0fd93e6d4ba0",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid hexadecimal strings",
              "fullTitle": "toNumber.js should return NaN for invalid hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1g\")).to.be.NaN; // Invalid hexadecimal",
              "err": {},
              "uuid": "4cbe3d2c-062b-4e29-a4d5-ed3f63833e22",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for symbols",
              "fullTitle": "toNumber.js should return NaN for symbols",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(Symbol(\"symbol\"))).to.be.NaN;",
              "err": {},
              "uuid": "cb0ab671-26c2-416f-90fe-594ab192cb3d",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects with valueOf method",
              "fullTitle": "toNumber.js should handle objects with valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = {\n    valueOf: () => 42\n};\nexpect(toNumber(obj)).to.equal(42);",
              "err": {},
              "uuid": "f7be6707-30b8-42e4-abac-9e75831f98ae",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects without valueOf method",
              "fullTitle": "toNumber.js should handle objects without valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1 };\nexpect(toNumber(obj)).to.be.NaN;",
              "err": {},
              "uuid": "9407d1b0-b946-4d63-8a4a-6a0c61c1d16c",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays",
              "fullTitle": "toNumber.js should handle arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([42])).to.equal(42); // Single-element array\nexpect(toNumber([1, 2])).to.be.NaN; // Multi-element array",
              "err": {},
              "uuid": "1977e158-dc4b-4a55-900a-565312348907",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for null or undefined",
              "fullTitle": "toNumber.js should return NaN for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(null)).to.equal(0); // Special case: null is coerced to 0\nexpect(toNumber(undefined)).to.be.NaN;",
              "err": {},
              "uuid": "8729c0b4-c92f-4921-a004-41bdf2bea65b",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with `0`",
              "fullTitle": "toNumber.js should handle edge cases with `0`",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(0)).to.equal(0); // 0 should remain 0\nexpect(toNumber(-0)).to.equal(-0); // -0 should remain -0",
              "err": {},
              "uuid": "3c30e5f6-f692-46bf-b3ab-b7b4b4ed20b2",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty objects gracefully",
              "fullTitle": "toNumber.js should handle empty objects gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber({})).to.be.NaN;",
              "err": {},
              "uuid": "54a757e2-2496-4b3d-9cd5-7624d0656d85",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers in strings",
              "fullTitle": "toNumber.js should handle very large numbers in strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"1e+30\")).to.equal(1e30); // Scientific notation",
              "err": {},
              "uuid": "03360e04-ed84-4a88-8c69-c2f40c673b82",
              "parentUUID": "07be11d6-2df4-4965-837b-deeab86d2746",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06b1b6a9-fe19-4b40-8559-935e971bd301",
            "f7bdbe2a-9977-4289-9a8f-f0961dafb2a3",
            "186ea1d3-7c34-4363-953d-b85a015b02dd",
            "1890d5b3-5202-4193-91ec-34175780d700",
            "57c5776b-9686-42b3-b5ec-0fd93e6d4ba0",
            "4cbe3d2c-062b-4e29-a4d5-ed3f63833e22",
            "cb0ab671-26c2-416f-90fe-594ab192cb3d",
            "f7be6707-30b8-42e4-abac-9e75831f98ae",
            "9407d1b0-b946-4d63-8a4a-6a0c61c1d16c",
            "1977e158-dc4b-4a55-900a-565312348907",
            "8729c0b4-c92f-4921-a004-41bdf2bea65b",
            "3c30e5f6-f692-46bf-b3ab-b7b4b4ed20b2",
            "54a757e2-2496-4b3d-9cd5-7624d0656d85",
            "03360e04-ed84-4a88-8c69-c2f40c673b82"
          ],
          "failures": [
            "429ea504-d4d4-41c3-a801-b1b0a8b4133a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}