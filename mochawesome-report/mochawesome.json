{
  "stats": {
    "suites": 6,
    "tests": 55,
    "passes": 39,
    "pending": 0,
    "failures": 16,
    "start": "2024-12-04T18:25:47.514Z",
    "end": "2024-12-04T18:25:47.539Z",
    "duration": 25,
    "testsRegistered": 55,
    "passPercent": 70.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e6964d4f-944b-40b3-967b-2e0d8ba0acf9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4542ba34-7ded-4292-a059-2cc5843e9db9",
          "title": "add.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 10 for add(6, 4)",
              "fullTitle": "add.js should return 10 for add(6, 4)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, 4)).to.equal(10);",
              "err": {},
              "uuid": "a24ad54a-5628-4227-94b7-8b6f093db6da",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for add(0, 0)",
              "fullTitle": "add.js should return 0 for add(0, 0)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 0)).to.equal(0);",
              "err": {},
              "uuid": "a3cdd1c6-0793-4fd7-a0b5-e8ae53ffdf02",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "add.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-5, -3)).to.equal(-8);",
              "err": {},
              "uuid": "b75c52f1-c328-4b3c-ba91-fdb54ab18353",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct value when adding positive and negative numbers",
              "fullTitle": "add.js should return correct value when adding positive and negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10, -5)).to.equal(5);",
              "err": {},
              "uuid": "27425f82-36a8-4e55-8903-d2e8f1e04c09",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "add.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5, 2.5)).to.equal(4.0);",
              "err": {},
              "uuid": "4623fc7a-d8e0-4b6b-8c7b-69d4178c1728",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "add.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1000000000, 2000000000)).to.equal(3000000000);",
              "err": {},
              "uuid": "9c1907a5-bf80-45ef-81a5-0736f5f36393",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the other number when one argument is 0",
              "fullTitle": "add.js should return the other number when one argument is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 5)).to.equal(5);\nexpect(add(10, 0)).to.equal(10);",
              "err": {},
              "uuid": "132e5f84-8934-42f3-b1d0-73b0ab59d0d5",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return concatenated strings if one or both arguments are strings",
              "fullTitle": "add.js should return concatenated strings if one or both arguments are strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(\"6\", 4)).to.equal(\"64\");\nexpect(add(6, \"4\")).to.equal(\"64\");\nexpect(add(\"6\", \"4\")).to.equal(\"64\");",
              "err": {},
              "uuid": "9b91b04e-1e0d-4feb-8c0d-660da145c8fe",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the argument value if only one argument is provided",
              "fullTitle": "add.js should return the argument value if only one argument is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(5)).to.equal(5);\nexpect(add(undefined, 4)).to.equal(4);",
              "err": {},
              "uuid": "5825003a-5c15-46c6-8324-f722377a9957",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if no arguments are provided",
              "fullTitle": "add.js should return 0 if no arguments are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.equal(0);",
              "err": {},
              "uuid": "9f4faa9b-79e2-49ec-800d-442c75126dea",
              "parentUUID": "4542ba34-7ded-4292-a059-2cc5843e9db9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a24ad54a-5628-4227-94b7-8b6f093db6da",
            "a3cdd1c6-0793-4fd7-a0b5-e8ae53ffdf02",
            "b75c52f1-c328-4b3c-ba91-fdb54ab18353",
            "27425f82-36a8-4e55-8903-d2e8f1e04c09",
            "4623fc7a-d8e0-4b6b-8c7b-69d4178c1728",
            "9c1907a5-bf80-45ef-81a5-0736f5f36393",
            "132e5f84-8934-42f3-b1d0-73b0ab59d0d5",
            "9b91b04e-1e0d-4feb-8c0d-660da145c8fe",
            "5825003a-5c15-46c6-8324-f722377a9957",
            "9f4faa9b-79e2-49ec-800d-442c75126dea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3b69262e-46d6-435d-acd7-73ce63d33af3",
          "title": "compact.js - Remove false values from arrays",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js",
          "file": "/test/compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove null and undefined values",
              "fullTitle": "compact.js - Remove false values from arrays should remove null and undefined values",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [null, 'Snacks', undefined];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Snacks']);  // Corrected to match compact.js behavior",
              "err": {
                "message": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]",
                "estack": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:9:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- []\n+ [\n+   \"Snacks\"\n+ ]\n"
              },
              "uuid": "c48d6db4-9fbc-43b5-8cd9-14bac0cce1ba",
              "parentUUID": "3b69262e-46d6-435d-acd7-73ce63d33af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the array unchanged if there are no false values",
              "fullTitle": "compact.js - Remove false values from arrays should return the array unchanged if there are no false values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['Drinks', 'Vegan'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Drinks', 'Vegan']);  // Ensured input order is unchanged",
              "err": {
                "message": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]",
                "estack": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:15:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"Drinks\"\n   \"Vegan\"\n ]\n"
              },
              "uuid": "6989f48e-f397-454e-a4fb-9de2c4427dc8",
              "parentUUID": "3b69262e-46d6-435d-acd7-73ce63d33af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove empty strings from the array",
              "fullTitle": "compact.js - Remove false values from arrays should remove empty strings from the array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [' ', 'Non-GMO', 'Snacks'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Non-GMO', 'Snacks']);  // Empty string removed correctly",
              "err": {},
              "uuid": "22d65e1a-f585-487c-bc69-985b420cef0c",
              "parentUUID": "3b69262e-46d6-435d-acd7-73ce63d33af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not remove 'false' and 0 from the array",
              "fullTitle": "compact.js - Remove false values from arrays should not remove 'false' and 0 from the array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['false', 'zero', 'Organic'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['false', 'zero', 'Organic']);  // 'false' and 'zero' are strings, not falsy values",
              "err": {
                "message": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]",
                "estack": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:27:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"false\"\n   \"zero\"\n   \"Organic\"\n ]\n"
              },
              "uuid": "fbab0d56-2f48-48f8-8820-b780971e0a4e",
              "parentUUID": "3b69262e-46d6-435d-acd7-73ce63d33af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when input is empty",
              "fullTitle": "compact.js - Remove false values from arrays should return an empty array when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = compact(input);\nexpect(result).to.deep.equal([]);  // Empty input should return an empty array",
              "err": {},
              "uuid": "9620cbc5-e276-4a7d-9edb-51df3d63b27a",
              "parentUUID": "3b69262e-46d6-435d-acd7-73ce63d33af3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22d65e1a-f585-487c-bc69-985b420cef0c",
            "9620cbc5-e276-4a7d-9edb-51df3d63b27a"
          ],
          "failures": [
            "c48d6db4-9fbc-43b5-8cd9-14bac0cce1ba",
            "6989f48e-f397-454e-a4fb-9de2c4427dc8",
            "fbab0d56-2f48-48f8-8820-b780971e0a4e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6e5a26e8-ab0e-41c7-8c11-9c04ac5063ea",
          "title": "countBy.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should count the occurrences of specific attribute values",
              "fullTitle": "countBy.js should count the occurrences of specific attribute values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: \"barney\", active: true },\n    { user: \"betty\", active: true },\n    { user: \"fred\", active: false },\n];\nconst result = countBy(users, (value) => value.active.toString());  // Ensure boolean is treated as string\nexpect(result).to.deep.equal({ \"true\": 2, \"false\": 1 });",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:14:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "366ba7b6-addc-4deb-80a2-265888785dd0",
              "parentUUID": "6e5a26e8-ab0e-41c7-8c11-9c04ac5063ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the number if number is valid",
              "fullTitle": "countBy.js should return the number if number is valid",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1.8, 2.2, 3.3, 2.4];\nconst result = countBy(numbers, (value) => Math.floor(value));\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:21:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "e9f15581-740f-42bb-98d6-e4dbaee5c6c0",
              "parentUUID": "6e5a26e8-ab0e-41c7-8c11-9c04ac5063ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert valid numeric strings into their correct numeric value",
              "fullTitle": "countBy.js should convert valid numeric strings into their correct numeric value",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const values = [\"1.8\", \"2.2\", \"3.3\", \"2.4\"];\nconst result = countBy(values, (value) => Math.floor(Number(value))); // Convert string to number first\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:28:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "96b45af6-2f90-4a09-818f-77b056445a21",
              "parentUUID": "6e5a26e8-ab0e-41c7-8c11-9c04ac5063ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with duplicate values",
              "fullTitle": "countBy.js should handle arrays with duplicate values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 2, 3, 3, 3];\nconst result = countBy(numbers, (value) => value.toString());  // Ensure numbers are treated as strings\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 3 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:35:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 2\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 3\n }\n"
              },
              "uuid": "00bc6774-7b04-4623-9108-cd937d5fdc7a",
              "parentUUID": "6e5a26e8-ab0e-41c7-8c11-9c04ac5063ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid collection input",
              "fullTitle": "countBy.js should throw an error for invalid collection input",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => countBy(null, (value) => value)).to.throw();\nexpect(() => countBy(undefined, (value) => value)).to.throw();\nexpect(() => countBy(\"not a collection\", (value) => value)).to.throw();",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:40:63)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "8d58355b-0a2d-42dc-98b3-67e956a38a15",
              "parentUUID": "6e5a26e8-ab0e-41c7-8c11-9c04ac5063ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty object for an empty array",
              "fullTitle": "countBy.js should return an empty object for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = countBy([], (value) => value);\nexpect(result).to.deep.equal({});",
              "err": {},
              "uuid": "1971fb83-a1ff-4887-b281-842b1d583659",
              "parentUUID": "6e5a26e8-ab0e-41c7-8c11-9c04ac5063ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid iteratee",
              "fullTitle": "countBy.js should throw an error for invalid iteratee",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nexpect(() => countBy(input, null)).to.throw();\nexpect(() => countBy(input, undefined)).to.throw();",
              "err": {},
              "uuid": "745715d1-b2e1-4a7e-b488-5567246795d2",
              "parentUUID": "6e5a26e8-ab0e-41c7-8c11-9c04ac5063ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1971fb83-a1ff-4887-b281-842b1d583659",
            "745715d1-b2e1-4a7e-b488-5567246795d2"
          ],
          "failures": [
            "366ba7b6-addc-4deb-80a2-265888785dd0",
            "e9f15581-740f-42bb-98d6-e4dbaee5c6c0",
            "96b45af6-2f90-4a09-818f-77b056445a21",
            "00bc6774-7b04-4623-9108-cd937d5fdc7a",
            "8d58355b-0a2d-42dc-98b3-67e956a38a15"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
          "title": "divide.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js",
          "file": "/test/divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1.5 for divide(6, 4)",
              "fullTitle": "divide.js should return 1.5 for divide(6, 4)",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, 4)).to.equal(1.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.5",
                "estack": "AssertionError: expected 1 to equal 1.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:6:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 1.5\n"
              },
              "uuid": "124c64b1-40c8-4a5c-9754-3ed4c60ef19c",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 2 for divide(10, 5)",
              "fullTitle": "divide.js should return 2 for divide(10, 5)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 5)).to.equal(2);",
              "err": {
                "message": "AssertionError: expected 1 to equal 2",
                "estack": "AssertionError: expected 1 to equal 2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:10:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 2\n"
              },
              "uuid": "02c4188c-52c2-40e8-a4ce-ecc6d57e1ec4",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for divide(10, 0)",
              "fullTitle": "divide.js should return NaN for divide(10, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 0)).to.be.NaN;",
              "err": {},
              "uuid": "2c33bddc-8d29-4d9c-b37f-2c9bdae51942",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "divide.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(-10, 5)).to.equal(-2);\nexpect(divide(10, -5)).to.equal(-2);",
              "err": {
                "message": "AssertionError: expected 1 to equal -2",
                "estack": "AssertionError: expected 1 to equal -2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:18:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ -2\n"
              },
              "uuid": "420049b6-7949-4e31-9732-7fe1e2943c17",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "divide.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(7.5, 2.5)).to.equal(3);",
              "err": {
                "message": "AssertionError: expected 1 to equal 3",
                "estack": "AssertionError: expected 1 to equal 3\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:23:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 3\n"
              },
              "uuid": "97a8c83d-b769-4b7e-b183-bfa3016b1a48",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when dividend is 0",
              "fullTitle": "divide.js should return 0 when dividend is 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(0, 5)).to.equal(0);",
              "err": {
                "message": "AssertionError: expected 1 to equal +0",
                "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:27:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "a778fd3a-c401-49cc-93e6-1eb08c4e8bec",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "divide.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(1000000000, 2000000000)).to.equal(0.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 0.5",
                "estack": "AssertionError: expected 1 to equal 0.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:31:51)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0.5\n"
              },
              "uuid": "514deffe-5b91-48ef-b615-6f80ecbb4e9c",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error or return NaN for invalid inputs",
              "fullTitle": "divide.js should throw an error or return NaN for invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => divide(\"6\", 4)).to.throw(); // If input validation exists\nexpect(divide(\"6\", 4)).to.be.NaN;       // If input validation doesn’t exist\nexpect(divide(6, \"4\")).to.be.NaN;\nexpect(divide(\"6\", \"4\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:35:46)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "110ef3a5-8881-4bb5-a44d-e2be671ddc54",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 for divide(1, 1)",
              "fullTitle": "divide.js should return 1 for divide(1, 1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(1, 1)).to.equal(1);",
              "err": {},
              "uuid": "9b0354d4-18fa-4209-86e4-7ca1fc9ec50d",
              "parentUUID": "5a8ee6e4-b3b4-4a42-ab0a-e5c31ed7e3ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c33bddc-8d29-4d9c-b37f-2c9bdae51942",
            "9b0354d4-18fa-4209-86e4-7ca1fc9ec50d"
          ],
          "failures": [
            "124c64b1-40c8-4a5c-9754-3ed4c60ef19c",
            "02c4188c-52c2-40e8-a4ce-ecc6d57e1ec4",
            "420049b6-7949-4e31-9732-7fe1e2943c17",
            "97a8c83d-b769-4b7e-b183-bfa3016b1a48",
            "a778fd3a-c401-49cc-93e6-1eb08c4e8bec",
            "514deffe-5b91-48ef-b615-6f80ecbb4e9c",
            "110ef3a5-8881-4bb5-a44d-e2be671ddc54"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
          "title": "isDate.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a valid Date object",
              "fullTitle": "isDate.js should return true for a valid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date());\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "8d05de4f-a34b-4ddc-bb03-ba4f93e41680",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string that looks like a date",
              "fullTitle": "isDate.js should return false for a string that looks like a date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(\"Mon April 23 2012\");\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "bddee624-e143-4f88-9058-51d22a607f9c",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a timestamp number",
              "fullTitle": "isDate.js should return false for a timestamp number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(1659394800000); // Example timestamp\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "01d57af8-089d-499f-a3eb-61037b10d319",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null or undefined",
              "fullTitle": "isDate.js should return false for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;\nexpect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "63981087-049a-4b74-90b5-79a965fbb3b7",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for plain objects",
              "fullTitle": "isDate.js should return false for plain objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate({ year: 2023, month: 12, day: 1 });\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "543cb7c1-3daa-44cb-9a44-141c047edd33",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for arrays",
              "fullTitle": "isDate.js should return false for arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate([\"2023-12-01\"]);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "ce4ae6c8-7190-40b3-be3a-cb62ce9b814d",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an invalid Date object",
              "fullTitle": "isDate.js should return true for an invalid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date(\"invalid date\"));\nexpect(result).to.be.true; // It's still a Date object, even if it's invalid.",
              "err": {},
              "uuid": "f3c75c3a-f4a1-4474-8e1f-e1a20f6e692e",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle custom Date-like objects",
              "fullTitle": "isDate.js should handle custom Date-like objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const customDate = { toString: () => \"[object Date]\" };\nconst result = isDate(customDate);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "37fe46f0-aec7-45ab-b75f-ecf37cb0e5e5",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with other object types",
              "fullTitle": "isDate.js should handle edge cases with other object types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Map())).to.be.false;\nexpect(isDate(new Set())).to.be.false;",
              "err": {},
              "uuid": "c4cbcff8-2dad-46e4-92ef-94deffdd4e38",
              "parentUUID": "04b569c5-60c0-44f8-a16f-2034bdf5cb4e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d05de4f-a34b-4ddc-bb03-ba4f93e41680",
            "bddee624-e143-4f88-9058-51d22a607f9c",
            "01d57af8-089d-499f-a3eb-61037b10d319",
            "63981087-049a-4b74-90b5-79a965fbb3b7",
            "543cb7c1-3daa-44cb-9a44-141c047edd33",
            "ce4ae6c8-7190-40b3-be3a-cb62ce9b814d",
            "f3c75c3a-f4a1-4474-8e1f-e1a20f6e692e",
            "37fe46f0-aec7-45ab-b75f-ecf37cb0e5e5",
            "c4cbcff8-2dad-46e4-92ef-94deffdd4e38"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
          "title": "toNumber.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the same number for numeric input",
              "fullTitle": "toNumber.js should return the same number for numeric input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(3.2)).to.equal(3.2);\nexpect(toNumber(Number.MIN_VALUE)).to.equal(5e-324);\nexpect(toNumber(Infinity)).to.equal(Infinity);\nexpect(toNumber(0)).to.equal(0);",
              "err": {},
              "uuid": "ca03a9ed-5e9b-43b2-b795-7aea5d3306ce",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse numeric strings correctly",
              "fullTitle": "toNumber.js should parse numeric strings correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"3.2\")).to.equal(3.2);\nexpect(toNumber(\"  42  \")).to.equal(42); // Leading/trailing whitespace",
              "err": {},
              "uuid": "8e5f09b2-37b0-4b76-9375-f47334e7fe89",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric strings",
              "fullTitle": "toNumber.js should return NaN for non-numeric strings",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"abc\")).to.be.NaN;\nexpect(toNumber(\"123abc\")).to.be.NaN;\nexpect(toNumber(\"\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected +0 to be NaN",
                "estack": "AssertionError: expected +0 to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js:20:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "94406e90-57ba-42a5-b09e-256804d9e345",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle binary strings",
              "fullTitle": "toNumber.js should handle binary strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0b101\")).to.equal(5); // Binary representation",
              "err": {},
              "uuid": "6b339502-1dcb-4fb9-a222-99d9b21a3f3c",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle octal strings",
              "fullTitle": "toNumber.js should handle octal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0o10\")).to.equal(8); // Octal representation",
              "err": {},
              "uuid": "abdc85b6-4d38-46b4-9406-3df562e7792c",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle hexadecimal strings",
              "fullTitle": "toNumber.js should handle hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1f\")).to.equal(31); // Hexadecimal representation",
              "err": {},
              "uuid": "d5cfdfbf-a98d-42ec-95ba-ada7a976a922",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid hexadecimal strings",
              "fullTitle": "toNumber.js should return NaN for invalid hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1g\")).to.be.NaN; // Invalid hexadecimal",
              "err": {},
              "uuid": "e7a7baa9-aada-40a5-b6f4-01460de04e28",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for symbols",
              "fullTitle": "toNumber.js should return NaN for symbols",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(Symbol(\"symbol\"))).to.be.NaN;",
              "err": {},
              "uuid": "490fda66-0af4-410a-8183-dea9436fb1d3",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects with valueOf method",
              "fullTitle": "toNumber.js should handle objects with valueOf method",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = {\n    valueOf: () => 42\n};\nexpect(toNumber(obj)).to.equal(42);",
              "err": {},
              "uuid": "f357a5d1-1527-4ec7-aa8b-0ee0b7355d2c",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects without valueOf method",
              "fullTitle": "toNumber.js should handle objects without valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1 };\nexpect(toNumber(obj)).to.be.NaN;",
              "err": {},
              "uuid": "5b91a985-f27e-4ab9-93e8-5c269e0a61af",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays",
              "fullTitle": "toNumber.js should handle arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([42])).to.equal(42); // Single-element array\nexpect(toNumber([1, 2])).to.be.NaN; // Multi-element array",
              "err": {},
              "uuid": "5c84bbf9-3956-4601-b3df-3b3aedd5c690",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for null or undefined",
              "fullTitle": "toNumber.js should return NaN for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(null)).to.equal(0); // Special case: null is coerced to 0\nexpect(toNumber(undefined)).to.be.NaN;",
              "err": {},
              "uuid": "b727bf03-6580-4f75-bc02-6cfd347adafd",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with `0`",
              "fullTitle": "toNumber.js should handle edge cases with `0`",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(0)).to.equal(0); // 0 should remain 0\nexpect(toNumber(-0)).to.equal(-0); // -0 should remain -0",
              "err": {},
              "uuid": "15b92b10-34a0-4c16-a8bd-d911d0a5f6d7",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty objects gracefully",
              "fullTitle": "toNumber.js should handle empty objects gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber({})).to.be.NaN;",
              "err": {},
              "uuid": "0db85bbf-d5a4-4d1e-b0ea-cb5ed1196405",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers in strings",
              "fullTitle": "toNumber.js should handle very large numbers in strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"1e+30\")).to.equal(1e30); // Scientific notation",
              "err": {},
              "uuid": "83163fac-83d0-47f8-a648-3447900f039d",
              "parentUUID": "4aca8a0b-fcff-4645-9896-b0c81a15dfdf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca03a9ed-5e9b-43b2-b795-7aea5d3306ce",
            "8e5f09b2-37b0-4b76-9375-f47334e7fe89",
            "6b339502-1dcb-4fb9-a222-99d9b21a3f3c",
            "abdc85b6-4d38-46b4-9406-3df562e7792c",
            "d5cfdfbf-a98d-42ec-95ba-ada7a976a922",
            "e7a7baa9-aada-40a5-b6f4-01460de04e28",
            "490fda66-0af4-410a-8183-dea9436fb1d3",
            "f357a5d1-1527-4ec7-aa8b-0ee0b7355d2c",
            "5b91a985-f27e-4ab9-93e8-5c269e0a61af",
            "5c84bbf9-3956-4601-b3df-3b3aedd5c690",
            "b727bf03-6580-4f75-bc02-6cfd347adafd",
            "15b92b10-34a0-4c16-a8bd-d911d0a5f6d7",
            "0db85bbf-d5a4-4d1e-b0ea-cb5ed1196405",
            "83163fac-83d0-47f8-a648-3447900f039d"
          ],
          "failures": [
            "94406e90-57ba-42a5-b09e-256804d9e345"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}