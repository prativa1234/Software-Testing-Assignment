{
  "stats": {
    "suites": 6,
    "tests": 55,
    "passes": 39,
    "pending": 0,
    "failures": 16,
    "start": "2024-12-04T18:55:21.381Z",
    "end": "2024-12-04T18:55:21.423Z",
    "duration": 42,
    "testsRegistered": 55,
    "passPercent": 70.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5e839938-7ad2-40e9-9f1c-1d786eaced61",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1a9e0234-2662-4394-b139-cd081639c72d",
          "title": "add.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 10 for add(6, 4)",
              "fullTitle": "add.js should return 10 for add(6, 4)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, 4)).to.equal(10);",
              "err": {},
              "uuid": "6e7217b1-766c-4f81-bbb5-7ba257fc57b7",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for add(0, 0)",
              "fullTitle": "add.js should return 0 for add(0, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 0)).to.equal(0);",
              "err": {},
              "uuid": "702f4e3b-fe83-452a-ba8a-26d872c8b12b",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "add.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-5, -3)).to.equal(-8);",
              "err": {},
              "uuid": "98ff5405-3363-444d-8f30-e48726e98128",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct value when adding positive and negative numbers",
              "fullTitle": "add.js should return correct value when adding positive and negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10, -5)).to.equal(5);",
              "err": {},
              "uuid": "1d5a8f82-8633-48eb-9153-ed31d0480366",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "add.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5, 2.5)).to.equal(4.0);",
              "err": {},
              "uuid": "0fddb6c6-6071-49e7-a09d-673dec8b836b",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "add.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1000000000, 2000000000)).to.equal(3000000000);",
              "err": {},
              "uuid": "aefeefde-f626-4c84-a8f6-90964a56b1b6",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the other number when one argument is 0",
              "fullTitle": "add.js should return the other number when one argument is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 5)).to.equal(5);\nexpect(add(10, 0)).to.equal(10);",
              "err": {},
              "uuid": "4061cf39-89b1-4090-a4e4-6baced6b4eb6",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return concatenated strings if one or both arguments are strings",
              "fullTitle": "add.js should return concatenated strings if one or both arguments are strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(\"6\", 4)).to.equal(\"64\");\nexpect(add(6, \"4\")).to.equal(\"64\");\nexpect(add(\"6\", \"4\")).to.equal(\"64\");",
              "err": {},
              "uuid": "1936195e-d7e9-42fc-bfd2-26343b3eaf15",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the argument value if only one argument is provided",
              "fullTitle": "add.js should return the argument value if only one argument is provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(5)).to.equal(5);\nexpect(add(undefined, 4)).to.equal(4);",
              "err": {},
              "uuid": "d3f9cedb-a6a4-4c04-868e-99a3a8cafb78",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if no arguments are provided",
              "fullTitle": "add.js should return 0 if no arguments are provided",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.equal(0);",
              "err": {},
              "uuid": "d0baaf70-79e7-457d-8b23-b163cb1f61b3",
              "parentUUID": "1a9e0234-2662-4394-b139-cd081639c72d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e7217b1-766c-4f81-bbb5-7ba257fc57b7",
            "702f4e3b-fe83-452a-ba8a-26d872c8b12b",
            "98ff5405-3363-444d-8f30-e48726e98128",
            "1d5a8f82-8633-48eb-9153-ed31d0480366",
            "0fddb6c6-6071-49e7-a09d-673dec8b836b",
            "aefeefde-f626-4c84-a8f6-90964a56b1b6",
            "4061cf39-89b1-4090-a4e4-6baced6b4eb6",
            "1936195e-d7e9-42fc-bfd2-26343b3eaf15",
            "d3f9cedb-a6a4-4c04-868e-99a3a8cafb78",
            "d0baaf70-79e7-457d-8b23-b163cb1f61b3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c11e5c9d-5f74-4eaa-8f85-f13882f3755d",
          "title": "compact.js - Remove false values from arrays",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js",
          "file": "/test/compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove null and undefined values",
              "fullTitle": "compact.js - Remove false values from arrays should remove null and undefined values",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [null, 'Snacks', undefined];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Snacks']);  // Corrected to match compact.js behavior",
              "err": {
                "message": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]",
                "estack": "AssertionError: expected [ , '-1': 'Snacks' ] to deeply equal [ 'Snacks' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:9:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- []\n+ [\n+   \"Snacks\"\n+ ]\n"
              },
              "uuid": "77a8e6a5-20e9-4f42-b2f7-24db69608a36",
              "parentUUID": "c11e5c9d-5f74-4eaa-8f85-f13882f3755d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the array unchanged if there are no false values",
              "fullTitle": "compact.js - Remove false values from arrays should return the array unchanged if there are no false values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['Drinks', 'Vegan'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Drinks', 'Vegan']);  // Ensured input order is unchanged",
              "err": {
                "message": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]",
                "estack": "AssertionError: expected [ 'Vegan', '-1': 'Drinks' ] to deeply equal [ 'Drinks', 'Vegan' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:15:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"Drinks\"\n   \"Vegan\"\n ]\n"
              },
              "uuid": "6e4959b8-103f-4834-9758-6f7d59cca20f",
              "parentUUID": "c11e5c9d-5f74-4eaa-8f85-f13882f3755d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove empty strings from the array",
              "fullTitle": "compact.js - Remove false values from arrays should remove empty strings from the array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [' ', 'Non-GMO', 'Snacks'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['Non-GMO', 'Snacks']);  // Empty string removed correctly",
              "err": {},
              "uuid": "b67ff95f-5304-436b-a80e-485fb82990a6",
              "parentUUID": "c11e5c9d-5f74-4eaa-8f85-f13882f3755d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not remove 'false' and 0 from the array",
              "fullTitle": "compact.js - Remove false values from arrays should not remove 'false' and 0 from the array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = ['false', 'zero', 'Organic'];\nconst result = compact(input);\nexpect(result).to.deep.equal(['false', 'zero', 'Organic']);  // 'false' and 'zero' are strings, not falsy values",
              "err": {
                "message": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]",
                "estack": "AssertionError: expected [ 'zero', 'Organic', '-1': 'fa…' ] to deeply equal [ 'false', 'zero', 'Organic' ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:27:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"false\"\n   \"zero\"\n   \"Organic\"\n ]\n"
              },
              "uuid": "17e5ce00-522d-4104-9844-f9b75a8589a2",
              "parentUUID": "c11e5c9d-5f74-4eaa-8f85-f13882f3755d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when input is empty",
              "fullTitle": "compact.js - Remove false values from arrays should return an empty array when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = compact(input);\nexpect(result).to.deep.equal([]);  // Empty input should return an empty array",
              "err": {},
              "uuid": "b217d321-7cd1-40dc-ba68-009178595f06",
              "parentUUID": "c11e5c9d-5f74-4eaa-8f85-f13882f3755d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b67ff95f-5304-436b-a80e-485fb82990a6",
            "b217d321-7cd1-40dc-ba68-009178595f06"
          ],
          "failures": [
            "77a8e6a5-20e9-4f42-b2f7-24db69608a36",
            "6e4959b8-103f-4834-9758-6f7d59cca20f",
            "17e5ce00-522d-4104-9844-f9b75a8589a2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "27ec665f-d401-4b54-a13d-063315312dc2",
          "title": "countBy.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should count the occurrences of specific attribute values",
              "fullTitle": "countBy.js should count the occurrences of specific attribute values",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: \"barney\", active: true },\n    { user: \"betty\", active: true },\n    { user: \"fred\", active: false },\n];\nconst result = countBy(users, (value) => value.active.toString());  // Ensure boolean is treated as string\nexpect(result).to.deep.equal({ \"true\": 2, \"false\": 1 });",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:14:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "fcf511a4-a3a5-4742-8c45-a287913ac5e6",
              "parentUUID": "27ec665f-d401-4b54-a13d-063315312dc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the number if number is valid",
              "fullTitle": "countBy.js should return the number if number is valid",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1.8, 2.2, 3.3, 2.4];\nconst result = countBy(numbers, (value) => Math.floor(value));\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:21:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "fc5d454b-04d0-4fe8-9614-13e0d5da3eaa",
              "parentUUID": "27ec665f-d401-4b54-a13d-063315312dc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert valid numeric strings into their correct numeric value",
              "fullTitle": "countBy.js should convert valid numeric strings into their correct numeric value",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const values = [\"1.8\", \"2.2\", \"3.3\", \"2.4\"];\nconst result = countBy(values, (value) => Math.floor(Number(value))); // Convert string to number first\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:28:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "87c8b87a-5f53-446a-b4f5-32fb82248a5b",
              "parentUUID": "27ec665f-d401-4b54-a13d-063315312dc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with duplicate values",
              "fullTitle": "countBy.js should handle arrays with duplicate values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 2, 3, 3, 3];\nconst result = countBy(numbers, (value) => value.toString());  // Ensure numbers are treated as strings\nexpect(result).to.deep.equal({ '1': 1, '2': 2, '3': 3 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:35:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 2\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 3\n }\n"
              },
              "uuid": "4457d889-0d30-4e0c-b0cc-5f93e13a24af",
              "parentUUID": "27ec665f-d401-4b54-a13d-063315312dc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid collection input",
              "fullTitle": "countBy.js should throw an error for invalid collection input",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => countBy(null, (value) => value)).to.throw();\nexpect(() => countBy(undefined, (value) => value)).to.throw();\nexpect(() => countBy(\"not a collection\", (value) => value)).to.throw();",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:40:63)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "c00a3dc9-4d07-4a1d-a69c-359458d3a7f8",
              "parentUUID": "27ec665f-d401-4b54-a13d-063315312dc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty object for an empty array",
              "fullTitle": "countBy.js should return an empty object for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = countBy([], (value) => value);\nexpect(result).to.deep.equal({});",
              "err": {},
              "uuid": "31f1bbff-e7cc-464e-a711-1e8c12355414",
              "parentUUID": "27ec665f-d401-4b54-a13d-063315312dc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid iteratee",
              "fullTitle": "countBy.js should throw an error for invalid iteratee",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nexpect(() => countBy(input, null)).to.throw();\nexpect(() => countBy(input, undefined)).to.throw();",
              "err": {},
              "uuid": "adc97ad3-3dbf-4555-a347-c96b4f51a23d",
              "parentUUID": "27ec665f-d401-4b54-a13d-063315312dc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31f1bbff-e7cc-464e-a711-1e8c12355414",
            "adc97ad3-3dbf-4555-a347-c96b4f51a23d"
          ],
          "failures": [
            "fcf511a4-a3a5-4742-8c45-a287913ac5e6",
            "fc5d454b-04d0-4fe8-9614-13e0d5da3eaa",
            "87c8b87a-5f53-446a-b4f5-32fb82248a5b",
            "4457d889-0d30-4e0c-b0cc-5f93e13a24af",
            "c00a3dc9-4d07-4a1d-a69c-359458d3a7f8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
          "title": "divide.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js",
          "file": "/test/divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1.5 for divide(6, 4)",
              "fullTitle": "divide.js should return 1.5 for divide(6, 4)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, 4)).to.equal(1.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.5",
                "estack": "AssertionError: expected 1 to equal 1.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:6:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 1.5\n"
              },
              "uuid": "6104879e-ef69-4cac-970b-79fafd644a38",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 2 for divide(10, 5)",
              "fullTitle": "divide.js should return 2 for divide(10, 5)",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 5)).to.equal(2);",
              "err": {
                "message": "AssertionError: expected 1 to equal 2",
                "estack": "AssertionError: expected 1 to equal 2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:10:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 2\n"
              },
              "uuid": "bab705e9-dfa8-480b-98e6-6a1f1e56feb8",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for divide(10, 0)",
              "fullTitle": "divide.js should return NaN for divide(10, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 0)).to.be.NaN;",
              "err": {},
              "uuid": "9959fe33-e8ec-42c6-bf6c-77b537a49755",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "divide.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(-10, 5)).to.equal(-2);\nexpect(divide(10, -5)).to.equal(-2);",
              "err": {
                "message": "AssertionError: expected 1 to equal -2",
                "estack": "AssertionError: expected 1 to equal -2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:18:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ -2\n"
              },
              "uuid": "8b06e6a4-8204-4816-be14-d833503205b4",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "divide.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(7.5, 2.5)).to.equal(3);",
              "err": {
                "message": "AssertionError: expected 1 to equal 3",
                "estack": "AssertionError: expected 1 to equal 3\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:23:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 3\n"
              },
              "uuid": "4f685f76-55af-46bf-bbf2-909fce6a9952",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when dividend is 0",
              "fullTitle": "divide.js should return 0 when dividend is 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(0, 5)).to.equal(0);",
              "err": {
                "message": "AssertionError: expected 1 to equal +0",
                "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:27:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "889fac42-f9c1-415a-a63b-a854f65f7ca5",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "divide.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(1000000000, 2000000000)).to.equal(0.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 0.5",
                "estack": "AssertionError: expected 1 to equal 0.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:31:51)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0.5\n"
              },
              "uuid": "46c1994f-71a9-43fc-90be-3bafacaa16c6",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error or return NaN for invalid inputs",
              "fullTitle": "divide.js should throw an error or return NaN for invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => divide(\"6\", 4)).to.throw(); // If input validation exists\nexpect(divide(\"6\", 4)).to.be.NaN;       // If input validation doesn’t exist\nexpect(divide(6, \"4\")).to.be.NaN;\nexpect(divide(\"6\", \"4\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:35:46)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "bdeab1e9-8253-4c05-a72d-30e0af8d91f9",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 for divide(1, 1)",
              "fullTitle": "divide.js should return 1 for divide(1, 1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(1, 1)).to.equal(1);",
              "err": {},
              "uuid": "b6ff8141-8cb7-48b6-b26c-9c78d26b3462",
              "parentUUID": "b0da104d-bf5c-46c5-8fe6-8b75869c6f77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9959fe33-e8ec-42c6-bf6c-77b537a49755",
            "b6ff8141-8cb7-48b6-b26c-9c78d26b3462"
          ],
          "failures": [
            "6104879e-ef69-4cac-970b-79fafd644a38",
            "bab705e9-dfa8-480b-98e6-6a1f1e56feb8",
            "8b06e6a4-8204-4816-be14-d833503205b4",
            "4f685f76-55af-46bf-bbf2-909fce6a9952",
            "889fac42-f9c1-415a-a63b-a854f65f7ca5",
            "46c1994f-71a9-43fc-90be-3bafacaa16c6",
            "bdeab1e9-8253-4c05-a72d-30e0af8d91f9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
          "title": "isDate.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a valid Date object",
              "fullTitle": "isDate.js should return true for a valid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date());\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "d3ec91ba-ebb7-4d02-beb6-769bb66bc298",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string that looks like a date",
              "fullTitle": "isDate.js should return false for a string that looks like a date",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(\"Mon April 23 2012\");\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "a9ebb813-ea67-4371-874d-dde49436df3e",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a timestamp number",
              "fullTitle": "isDate.js should return false for a timestamp number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(1659394800000); // Example timestamp\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "de918c41-f140-45b0-a869-2f6b04dfe0b2",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null or undefined",
              "fullTitle": "isDate.js should return false for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;\nexpect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "a6db7102-b36d-4a2d-9d7b-d485bd0f4067",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for plain objects",
              "fullTitle": "isDate.js should return false for plain objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate({ year: 2023, month: 12, day: 1 });\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "bfd0ff25-b823-4ff6-97df-4694259f17c8",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for arrays",
              "fullTitle": "isDate.js should return false for arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate([\"2023-12-01\"]);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "b3acce9a-7659-42a1-a6a6-effd1ba2ce5b",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an invalid Date object",
              "fullTitle": "isDate.js should return true for an invalid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date(\"invalid date\"));\nexpect(result).to.be.true; // It's still a Date object, even if it's invalid.",
              "err": {},
              "uuid": "91161320-9b3f-46c5-b9a1-d385bfddeb13",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle custom Date-like objects",
              "fullTitle": "isDate.js should handle custom Date-like objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const customDate = { toString: () => \"[object Date]\" };\nconst result = isDate(customDate);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "f65e93e3-2219-42a1-b733-12ff15d42f05",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with other object types",
              "fullTitle": "isDate.js should handle edge cases with other object types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Map())).to.be.false;\nexpect(isDate(new Set())).to.be.false;",
              "err": {},
              "uuid": "8d5e4b6f-561b-47b4-98dc-629bc827d693",
              "parentUUID": "9e4474ef-c6f6-40dd-903e-70aa7ac2b044",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3ec91ba-ebb7-4d02-beb6-769bb66bc298",
            "a9ebb813-ea67-4371-874d-dde49436df3e",
            "de918c41-f140-45b0-a869-2f6b04dfe0b2",
            "a6db7102-b36d-4a2d-9d7b-d485bd0f4067",
            "bfd0ff25-b823-4ff6-97df-4694259f17c8",
            "b3acce9a-7659-42a1-a6a6-effd1ba2ce5b",
            "91161320-9b3f-46c5-b9a1-d385bfddeb13",
            "f65e93e3-2219-42a1-b733-12ff15d42f05",
            "8d5e4b6f-561b-47b4-98dc-629bc827d693"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bfc33566-170a-46e5-9d6e-b26560f21bde",
          "title": "toNumber.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the same number for numeric input",
              "fullTitle": "toNumber.js should return the same number for numeric input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(3.2)).to.equal(3.2);\nexpect(toNumber(Number.MIN_VALUE)).to.equal(5e-324);\nexpect(toNumber(Infinity)).to.equal(Infinity);\nexpect(toNumber(0)).to.equal(0);",
              "err": {},
              "uuid": "0a600fcf-f237-4bbe-ab81-907c5baa5104",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse numeric strings correctly",
              "fullTitle": "toNumber.js should parse numeric strings correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"3.2\")).to.equal(3.2);\nexpect(toNumber(\"  42  \")).to.equal(42); // Leading/trailing whitespace",
              "err": {},
              "uuid": "275e5a8b-a3ad-4210-8bf4-165f216c3dc4",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric strings",
              "fullTitle": "toNumber.js should return NaN for non-numeric strings",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"abc\")).to.be.NaN;\nexpect(toNumber(\"123abc\")).to.be.NaN;\nexpect(toNumber(\"\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected +0 to be NaN",
                "estack": "AssertionError: expected +0 to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js:20:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "e5e3aed9-f397-4d54-a172-c2a0c7949d5d",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle binary strings",
              "fullTitle": "toNumber.js should handle binary strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0b101\")).to.equal(5); // Binary representation",
              "err": {},
              "uuid": "4732f0de-20b3-43ae-805a-01e464177ddf",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle octal strings",
              "fullTitle": "toNumber.js should handle octal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0o10\")).to.equal(8); // Octal representation",
              "err": {},
              "uuid": "305bc992-89bb-4fc5-bffb-78e344ffa208",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle hexadecimal strings",
              "fullTitle": "toNumber.js should handle hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1f\")).to.equal(31); // Hexadecimal representation",
              "err": {},
              "uuid": "9a972871-6619-4066-a9a4-245a4bbaea4f",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid hexadecimal strings",
              "fullTitle": "toNumber.js should return NaN for invalid hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1g\")).to.be.NaN; // Invalid hexadecimal",
              "err": {},
              "uuid": "f6a1f534-4723-4773-a19c-778ac13703ff",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for symbols",
              "fullTitle": "toNumber.js should return NaN for symbols",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(Symbol(\"symbol\"))).to.be.NaN;",
              "err": {},
              "uuid": "19490ec6-94c3-408b-81f1-7f2a31827982",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects with valueOf method",
              "fullTitle": "toNumber.js should handle objects with valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = {\n    valueOf: () => 42\n};\nexpect(toNumber(obj)).to.equal(42);",
              "err": {},
              "uuid": "5a2f9eab-05a6-4224-a645-9663efd97d80",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects without valueOf method",
              "fullTitle": "toNumber.js should handle objects without valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1 };\nexpect(toNumber(obj)).to.be.NaN;",
              "err": {},
              "uuid": "d58cf8e1-0f80-4e74-802b-b93b3e0ba737",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays",
              "fullTitle": "toNumber.js should handle arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([42])).to.equal(42); // Single-element array\nexpect(toNumber([1, 2])).to.be.NaN; // Multi-element array",
              "err": {},
              "uuid": "72a658b9-babe-4633-9178-d65108550c14",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for null or undefined",
              "fullTitle": "toNumber.js should return NaN for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(null)).to.equal(0); // Special case: null is coerced to 0\nexpect(toNumber(undefined)).to.be.NaN;",
              "err": {},
              "uuid": "d81bd2af-1d52-4d8e-9513-1fd99e2b4266",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with `0`",
              "fullTitle": "toNumber.js should handle edge cases with `0`",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(0)).to.equal(0); // 0 should remain 0\nexpect(toNumber(-0)).to.equal(-0); // -0 should remain -0",
              "err": {},
              "uuid": "2ea6c462-decf-4bc8-9c16-58365a8ea751",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty objects gracefully",
              "fullTitle": "toNumber.js should handle empty objects gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber({})).to.be.NaN;",
              "err": {},
              "uuid": "7fa4b893-cd2c-452d-a8e1-da1329f5a05e",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers in strings",
              "fullTitle": "toNumber.js should handle very large numbers in strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"1e+30\")).to.equal(1e30); // Scientific notation",
              "err": {},
              "uuid": "d9439cd3-f76d-4a42-8118-219affd505cf",
              "parentUUID": "bfc33566-170a-46e5-9d6e-b26560f21bde",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a600fcf-f237-4bbe-ab81-907c5baa5104",
            "275e5a8b-a3ad-4210-8bf4-165f216c3dc4",
            "4732f0de-20b3-43ae-805a-01e464177ddf",
            "305bc992-89bb-4fc5-bffb-78e344ffa208",
            "9a972871-6619-4066-a9a4-245a4bbaea4f",
            "f6a1f534-4723-4773-a19c-778ac13703ff",
            "19490ec6-94c3-408b-81f1-7f2a31827982",
            "5a2f9eab-05a6-4224-a645-9663efd97d80",
            "d58cf8e1-0f80-4e74-802b-b93b3e0ba737",
            "72a658b9-babe-4633-9178-d65108550c14",
            "d81bd2af-1d52-4d8e-9513-1fd99e2b4266",
            "2ea6c462-decf-4bc8-9c16-58365a8ea751",
            "7fa4b893-cd2c-452d-a8e1-da1329f5a05e",
            "d9439cd3-f76d-4a42-8118-219affd505cf"
          ],
          "failures": [
            "e5e3aed9-f397-4d54-a172-c2a0c7949d5d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}