{
  "stats": {
    "suites": 6,
    "tests": 57,
    "passes": 36,
    "pending": 0,
    "failures": 21,
    "start": "2024-12-02T16:46:28.306Z",
    "end": "2024-12-02T16:46:28.326Z",
    "duration": 20,
    "testsRegistered": 57,
    "passPercent": 63.1578947368421,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "212c8134-15d8-4b7f-901e-05b198053140",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "98462263-ea82-46ec-b66c-37036bd0dd56",
          "title": "add.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 10 for add(6, 4)",
              "fullTitle": "add.js should return 10 for add(6, 4)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(6, 4)).to.equal(10);",
              "err": {},
              "uuid": "d9fd319f-8929-4148-b2f6-a6fca3465c15",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 for add(0, 0)",
              "fullTitle": "add.js should return 0 for add(0, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 0)).to.equal(0);",
              "err": {},
              "uuid": "2edc9f3d-4be5-4ad0-ab38-c1f8b9aa0554",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "add.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(-5, -3)).to.equal(-8);",
              "err": {},
              "uuid": "efbbc7d0-2de1-4772-8851-30656786b394",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct value when adding positive and negative numbers",
              "fullTitle": "add.js should return correct value when adding positive and negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(10, -5)).to.equal(5);",
              "err": {},
              "uuid": "e64beada-444b-4cbe-8b34-f5b50b157495",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "add.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1.5, 2.5)).to.equal(4.0);",
              "err": {},
              "uuid": "14a61f12-4a8e-48a9-9e01-62330b53d7cb",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "add.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(1000000000, 2000000000)).to.equal(3000000000);",
              "err": {},
              "uuid": "c9e9949c-5f61-44ed-b582-c6e083420f0e",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the other number when one argument is 0",
              "fullTitle": "add.js should return the other number when one argument is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(add(0, 5)).to.equal(5);\nexpect(add(10, 0)).to.equal(10);",
              "err": {},
              "uuid": "b1ec5e14-1ed5-4cab-80ba-07a39a241e5e",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN if one or both arguments are not numbers",
              "fullTitle": "add.js should return NaN if one or both arguments are not numbers",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add(\"6\", 4)).to.be.NaN;\nexpect(add(6, \"4\")).to.be.NaN;\nexpect(add(\"6\", \"4\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected '64' to be NaN",
                "estack": "AssertionError: expected '64' to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/add.test.js:35:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "0e679f59-d464-46eb-8f7e-2c7530ccfbf5",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN if no arguments are provided",
              "fullTitle": "add.js should return NaN if no arguments are provided",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(add()).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected +0 to be NaN",
                "estack": "AssertionError: expected +0 to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/add.test.js:41:28)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "bff4156c-28db-4538-8170-13434b31b2e8",
              "parentUUID": "98462263-ea82-46ec-b66c-37036bd0dd56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9fd319f-8929-4148-b2f6-a6fca3465c15",
            "2edc9f3d-4be5-4ad0-ab38-c1f8b9aa0554",
            "efbbc7d0-2de1-4772-8851-30656786b394",
            "e64beada-444b-4cbe-8b34-f5b50b157495",
            "14a61f12-4a8e-48a9-9e01-62330b53d7cb",
            "c9e9949c-5f61-44ed-b582-c6e083420f0e",
            "b1ec5e14-1ed5-4cab-80ba-07a39a241e5e"
          ],
          "failures": [
            "0e679f59-d464-46eb-8f7e-2c7530ccfbf5",
            "bff4156c-28db-4538-8170-13434b31b2e8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7cff9240-a2e2-40f4-b87d-8bdb14d0de0f",
          "title": "compact.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js",
          "file": "/test/compact.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove all falsey values from an array",
              "fullTitle": "compact.js should remove all falsey values from an array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [0, 1, false, 2, '', 3];\nconst result = compact(input);\nexpect(result).to.deep.equal([1, 2, 3]);",
              "err": {
                "message": "AssertionError: expected [ 2, 3, '-1': 1 ] to deeply equal [ 1, 2, 3 ]",
                "estack": "AssertionError: expected [ 2, 3, '-1': 1 ] to deeply equal [ 1, 2, 3 ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:8:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   1\n   2\n   3\n ]\n"
              },
              "uuid": "90d1dc2c-1803-4b34-b22b-2c263a81f06c",
              "parentUUID": "7cff9240-a2e2-40f4-b87d-8bdb14d0de0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with no falsey values",
              "fullTitle": "compact.js should handle arrays with no falsey values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nconst result = compact(input);\nexpect(result).to.deep.equal([1, 2, 3]);",
              "err": {
                "message": "AssertionError: expected [ 2, 3, '-1': 1 ] to deeply equal [ 1, 2, 3 ]",
                "estack": "AssertionError: expected [ 2, 3, '-1': 1 ] to deeply equal [ 1, 2, 3 ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:14:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   1\n   2\n   3\n ]\n"
              },
              "uuid": "452b60a7-a7dc-4c5b-92cd-e4567c86d6d8",
              "parentUUID": "7cff9240-a2e2-40f4-b87d-8bdb14d0de0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when input is empty",
              "fullTitle": "compact.js should return an empty array when input is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [];\nconst result = compact(input);\nexpect(result).to.deep.equal([]);",
              "err": {},
              "uuid": "90f08879-8f07-4664-8e34-cb58809f50df",
              "parentUUID": "7cff9240-a2e2-40f4-b87d-8bdb14d0de0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with all falsey values",
              "fullTitle": "compact.js should handle arrays with all falsey values",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [0, false, null, undefined, NaN, \"\"];\nconst result = compact(input);\nexpect(result).to.deep.equal([]);",
              "err": {},
              "uuid": "42ccdf5a-8529-4d43-afd2-c94be5666777",
              "parentUUID": "7cff9240-a2e2-40f4-b87d-8bdb14d0de0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle mixed data types in the array",
              "fullTitle": "compact.js should handle mixed data types in the array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const input = [0, \"string\", false, true, null, 42];\nconst result = compact(input);\nexpect(result).to.deep.equal([\"string\", true, 42]);",
              "err": {
                "message": "AssertionError: expected [ true, 42, '-1': 'string' ] to deeply equal [ 'string', true, 42 ]",
                "estack": "AssertionError: expected [ true, 42, '-1': 'string' ] to deeply equal [ 'string', true, 42 ]\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:32:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " [\n+   \"string\"\n   true\n   42\n ]\n"
              },
              "uuid": "ffb6e081-be70-430a-a0f7-e852af242702",
              "parentUUID": "7cff9240-a2e2-40f4-b87d-8bdb14d0de0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if input is null or undefined",
              "fullTitle": "compact.js should return an empty array if input is null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(compact(null)).to.deep.equal([]);\nexpect(compact(undefined)).to.deep.equal([]);",
              "err": {
                "message": "TypeError: array is not iterable",
                "estack": "TypeError: array is not iterable\n    at compact (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/src/compact.js:18:23)\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:36:16)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "e2c4c256-3e85-4808-b5cf-30f524dab905",
              "parentUUID": "7cff9240-a2e2-40f4-b87d-8bdb14d0de0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not an array",
              "fullTitle": "compact.js should throw an error if input is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => compact(\"not an array\")).to.throw();\nexpect(() => compact(42)).to.throw();\nexpect(() => compact({})).to.throw();",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/compact.test.js:41:55)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "21657cea-9ff8-41ab-9df5-486b977c1505",
              "parentUUID": "7cff9240-a2e2-40f4-b87d-8bdb14d0de0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90f08879-8f07-4664-8e34-cb58809f50df",
            "42ccdf5a-8529-4d43-afd2-c94be5666777"
          ],
          "failures": [
            "90d1dc2c-1803-4b34-b22b-2c263a81f06c",
            "452b60a7-a7dc-4c5b-92cd-e4567c86d6d8",
            "ffb6e081-be70-430a-a0f7-e852af242702",
            "e2c4c256-3e85-4808-b5cf-30f524dab905",
            "21657cea-9ff8-41ab-9df5-486b977c1505"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
          "title": "countBy.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js",
          "file": "/test/countBy.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should count elements by a property value",
              "fullTitle": "countBy.js should count elements by a property value",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const users = [\n    { user: \"barney\", active: true },\n    { user: \"betty\", active: true },\n    { user: \"fred\", active: false },\n];\nconst result = countBy(users, (value) => value.active);\nexpect(result).to.deep.equal({ true: 2, false: 1 });",
              "err": {
                "message": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }",
                "estack": "AssertionError: expected { true: 1, false: +0 } to deeply equal { true: 2, false: 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:12:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"false\": 0\n-   \"true\": 1\n+   \"false\": 1\n+   \"true\": 2\n }\n"
              },
              "uuid": "469c30ab-04b0-4343-a7ec-b976b32997e2",
              "parentUUID": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays of numbers",
              "fullTitle": "countBy.js should handle arrays of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1.1, 2.2, 3.3, 2.4];\nconst result = countBy(numbers, (value) => Math.floor(value));\nexpect(result).to.deep.equal({ 1: 1, 2: 2, 3: 1 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': +0 } to deeply equal { '1': 1, '2': 2, '3': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:18:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 0\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 1\n }\n"
              },
              "uuid": "bece29ca-0dcc-40d8-a092-bad929bbd478",
              "parentUUID": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should count elements by string length",
              "fullTitle": "countBy.js should count elements by string length",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const words = [\"one\", \"two\", \"three\", \"four\", \"five\"];\nconst result = countBy(words, (value) => value.length);\nexpect(result).to.deep.equal({ 3: 2, 4: 2, 5: 1 });",
              "err": {
                "message": "AssertionError: expected { '3': 1, '4': 1, '5': +0 } to deeply equal { '3': 2, '4': 2, '5': 1 }",
                "estack": "AssertionError: expected { '3': 1, '4': 1, '5': +0 } to deeply equal { '3': 2, '4': 2, '5': 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:24:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"3\": 1\n-   \"4\": 1\n-   \"5\": 0\n+   \"3\": 2\n+   \"4\": 2\n+   \"5\": 1\n }\n"
              },
              "uuid": "7d331647-db91-4ac4-ad87-ed8c46e859dd",
              "parentUUID": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty object for an empty array",
              "fullTitle": "countBy.js should return an empty object for an empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = countBy([], (value) => value);\nexpect(result).to.deep.equal({});",
              "err": {},
              "uuid": "d1efd963-3668-4e01-8df6-291b5e4b45d3",
              "parentUUID": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays with duplicate values",
              "fullTitle": "countBy.js should handle arrays with duplicate values",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 2, 3, 3, 3];\nconst result = countBy(numbers, (value) => value);\nexpect(result).to.deep.equal({ 1: 1, 2: 2, 3: 3 });",
              "err": {
                "message": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }",
                "estack": "AssertionError: expected { '1': +0, '2': 1, '3': 2 } to deeply equal { '1': 1, '2': 2, '3': 3 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:35:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"1\": 0\n-   \"2\": 1\n-   \"3\": 2\n+   \"1\": 1\n+   \"2\": 2\n+   \"3\": 3\n }\n"
              },
              "uuid": "5760eb4e-6127-425b-a178-faf16290c4de",
              "parentUUID": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle non-array objects",
              "fullTitle": "countBy.js should handle non-array objects",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const object = { a: 1, b: 2, c: 3 };\nconst result = countBy(object, (value) => value % 2 === 0);\nexpect(result).to.deep.equal({ false: 2, true: 1 });",
              "err": {
                "message": "AssertionError: expected { false: 1, true: +0 } to deeply equal { false: 2, true: 1 }",
                "estack": "AssertionError: expected { false: 1, true: +0 } to deeply equal { false: 2, true: 1 }\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:41:32)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": " {\n-   \"false\": 1\n-   \"true\": 0\n+   \"false\": 2\n+   \"true\": 1\n }\n"
              },
              "uuid": "b089eb83-b515-4f74-9065-bbed0935a477",
              "parentUUID": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid iteratee",
              "fullTitle": "countBy.js should throw an error for invalid iteratee",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [1, 2, 3];\nexpect(() => countBy(input, null)).to.throw();",
              "err": {},
              "uuid": "bdf00fae-ec80-4fa2-8124-00d9d04899a8",
              "parentUUID": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for invalid collection input",
              "fullTitle": "countBy.js should throw an error for invalid collection input",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => countBy(null, (value) => value)).to.throw();\nexpect(() => countBy(undefined, (value) => value)).to.throw();\nexpect(() => countBy(\"not a collection\", (value) => value)).to.throw();",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/countBy.test.js:50:63)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "4a857026-ee27-47a0-ace9-35988be00e40",
              "parentUUID": "7abf1b5e-dacc-430a-aded-fa3292e6ee75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1efd963-3668-4e01-8df6-291b5e4b45d3",
            "bdf00fae-ec80-4fa2-8124-00d9d04899a8"
          ],
          "failures": [
            "469c30ab-04b0-4343-a7ec-b976b32997e2",
            "bece29ca-0dcc-40d8-a092-bad929bbd478",
            "7d331647-db91-4ac4-ad87-ed8c46e859dd",
            "5760eb4e-6127-425b-a178-faf16290c4de",
            "b089eb83-b515-4f74-9065-bbed0935a477",
            "4a857026-ee27-47a0-ace9-35988be00e40"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
          "title": "divide.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js",
          "file": "/test/divide.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1.5 for divide(6, 4)",
              "fullTitle": "divide.js should return 1.5 for divide(6, 4)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(6, 4)).to.equal(1.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.5",
                "estack": "AssertionError: expected 1 to equal 1.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:6:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 1.5\n"
              },
              "uuid": "7e38a6bb-9f77-423f-8eb4-55588b0ec4b7",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 2 for divide(10, 5)",
              "fullTitle": "divide.js should return 2 for divide(10, 5)",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 5)).to.equal(2);",
              "err": {
                "message": "AssertionError: expected 1 to equal 2",
                "estack": "AssertionError: expected 1 to equal 2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:10:34)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 2\n"
              },
              "uuid": "55cf059a-de2d-459f-a119-5bb2f280e154",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for divide(10, 0)",
              "fullTitle": "divide.js should return NaN for divide(10, 0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(10, 0)).to.be.NaN;",
              "err": {},
              "uuid": "0e74324e-d8a2-41ed-a550-640a0d2f3ede",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle negative numbers",
              "fullTitle": "divide.js should handle negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(-10, 5)).to.equal(-2);\nexpect(divide(10, -5)).to.equal(-2);",
              "err": {
                "message": "AssertionError: expected 1 to equal -2",
                "estack": "AssertionError: expected 1 to equal -2\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:18:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ -2\n"
              },
              "uuid": "0a6a3bb4-6676-4504-a038-e061c529bae8",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle decimals",
              "fullTitle": "divide.js should handle decimals",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(7.5, 2.5)).to.equal(3);",
              "err": {
                "message": "AssertionError: expected 1 to equal 3",
                "estack": "AssertionError: expected 1 to equal 3\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:23:37)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 3\n"
              },
              "uuid": "57571688-1cbe-4cfc-9aa4-226b1863fc25",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when dividend is 0",
              "fullTitle": "divide.js should return 0 when dividend is 0",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(0, 5)).to.equal(0);",
              "err": {
                "message": "AssertionError: expected 1 to equal +0",
                "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:27:33)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "f4e7ed3e-2083-4e10-908c-a9c9d1d58610",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle large numbers",
              "fullTitle": "divide.js should handle large numbers",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(divide(1000000000, 2000000000)).to.equal(0.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 0.5",
                "estack": "AssertionError: expected 1 to equal 0.5\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:31:51)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": "- 1\n+ 0.5\n"
              },
              "uuid": "72bdd5c4-a753-4b59-ae8a-fa80626f9d74",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error or return NaN for invalid inputs",
              "fullTitle": "divide.js should throw an error or return NaN for invalid inputs",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => divide(\"6\", 4)).to.throw(); // If input validation exists\nexpect(divide(\"6\", 4)).to.be.NaN;       // If input validation doesn’t exist\nexpect(divide(6, \"4\")).to.be.NaN;\nexpect(divide(\"6\", \"4\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/divide.test.js:35:46)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "2f0df58e-292f-4c23-afc9-a6a8adb123c2",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 for divide(1, 1)",
              "fullTitle": "divide.js should return 1 for divide(1, 1)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(divide(1, 1)).to.equal(1);",
              "err": {},
              "uuid": "e7a2fa44-da1b-47d5-af2f-9850232ee683",
              "parentUUID": "aa579f3f-e596-4dc0-8b9f-f4d7289a296c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e74324e-d8a2-41ed-a550-640a0d2f3ede",
            "e7a2fa44-da1b-47d5-af2f-9850232ee683"
          ],
          "failures": [
            "7e38a6bb-9f77-423f-8eb4-55588b0ec4b7",
            "55cf059a-de2d-459f-a119-5bb2f280e154",
            "0a6a3bb4-6676-4504-a038-e061c529bae8",
            "57571688-1cbe-4cfc-9aa4-226b1863fc25",
            "f4e7ed3e-2083-4e10-908c-a9c9d1d58610",
            "72bdd5c4-a753-4b59-ae8a-fa80626f9d74",
            "2f0df58e-292f-4c23-afc9-a6a8adb123c2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8d49d815-fa13-414e-a1eb-1298bda140d1",
          "title": "isDate.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for a valid Date object",
              "fullTitle": "isDate.js should return true for a valid Date object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date());\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "e44247db-777c-449a-981c-f5fbef234897",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a string that looks like a date",
              "fullTitle": "isDate.js should return false for a string that looks like a date",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(\"Mon April 23 2012\");\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "e4e8f40b-66b5-472e-954f-06ec09b329f4",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a timestamp number",
              "fullTitle": "isDate.js should return false for a timestamp number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(1659394800000); // Example timestamp\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "e3ec22e2-47b8-4d2c-bc0b-4fc269af98f1",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for null or undefined",
              "fullTitle": "isDate.js should return false for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(null)).to.be.false;\nexpect(isDate(undefined)).to.be.false;",
              "err": {},
              "uuid": "126f1694-2625-4f34-af98-0c7f369b560c",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for plain objects",
              "fullTitle": "isDate.js should return false for plain objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate({ year: 2023, month: 12, day: 1 });\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "8d591d45-8c41-43ba-8202-f7301fe81fe1",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for arrays",
              "fullTitle": "isDate.js should return false for arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate([\"2023-12-01\"]);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "9e120bf5-4dff-4d36-9622-e823bf9db605",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an invalid Date object",
              "fullTitle": "isDate.js should return true for an invalid Date object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = isDate(new Date(\"invalid date\"));\nexpect(result).to.be.true; // It's still a Date object, even if it's invalid.",
              "err": {},
              "uuid": "7b15eea5-d240-4e9e-a81f-d95513130fe0",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle custom Date-like objects",
              "fullTitle": "isDate.js should handle custom Date-like objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const customDate = { toString: () => \"[object Date]\" };\nconst result = isDate(customDate);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "eefc4410-3621-4fcd-ac81-fe9a3c1c6b6e",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with other object types",
              "fullTitle": "isDate.js should handle edge cases with other object types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isDate(new Map())).to.be.false;\nexpect(isDate(new Set())).to.be.false;",
              "err": {},
              "uuid": "1f7ae477-07d5-4590-b8b1-16f46597e6a3",
              "parentUUID": "8d49d815-fa13-414e-a1eb-1298bda140d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e44247db-777c-449a-981c-f5fbef234897",
            "e4e8f40b-66b5-472e-954f-06ec09b329f4",
            "e3ec22e2-47b8-4d2c-bc0b-4fc269af98f1",
            "126f1694-2625-4f34-af98-0c7f369b560c",
            "8d591d45-8c41-43ba-8202-f7301fe81fe1",
            "9e120bf5-4dff-4d36-9622-e823bf9db605",
            "7b15eea5-d240-4e9e-a81f-d95513130fe0",
            "eefc4410-3621-4fcd-ac81-fe9a3c1c6b6e",
            "1f7ae477-07d5-4590-b8b1-16f46597e6a3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a12784f-d436-47a2-97e2-bab87ca97747",
          "title": "toNumber.js",
          "fullFile": "/Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return the same number for numeric input",
              "fullTitle": "toNumber.js should return the same number for numeric input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(3.2)).to.equal(3.2);\nexpect(toNumber(Number.MIN_VALUE)).to.equal(5e-324);\nexpect(toNumber(Infinity)).to.equal(Infinity);\nexpect(toNumber(0)).to.equal(0);",
              "err": {},
              "uuid": "517004ea-925f-4148-bd3c-52bf6e415fee",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should parse numeric strings correctly",
              "fullTitle": "toNumber.js should parse numeric strings correctly",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"3.2\")).to.equal(3.2);\nexpect(toNumber(\"  42  \")).to.equal(42); // Leading/trailing whitespace",
              "err": {},
              "uuid": "8664a177-8f84-4b9c-aa6f-03a98ab437f8",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for non-numeric strings",
              "fullTitle": "toNumber.js should return NaN for non-numeric strings",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"abc\")).to.be.NaN;\nexpect(toNumber(\"123abc\")).to.be.NaN;\nexpect(toNumber(\"\")).to.be.NaN;",
              "err": {
                "message": "AssertionError: expected +0 to be NaN",
                "estack": "AssertionError: expected +0 to be NaN\n    at Context.<anonymous> (file:///Users/zhiqing.feng/Desktop/Personal/TUN/soft_testing/test/toNumber.test.js:20:35)\n    at process.processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "a8b264f4-1708-49b9-bdda-095188c3e996",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle binary strings",
              "fullTitle": "toNumber.js should handle binary strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0b101\")).to.equal(5); // Binary representation",
              "err": {},
              "uuid": "5f6ea26b-e5b4-461a-9d5e-b00b2ec8f259",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle octal strings",
              "fullTitle": "toNumber.js should handle octal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0o10\")).to.equal(8); // Octal representation",
              "err": {},
              "uuid": "c043d219-b3eb-4a5d-8fef-6cf4607ec708",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle hexadecimal strings",
              "fullTitle": "toNumber.js should handle hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1f\")).to.equal(31); // Hexadecimal representation",
              "err": {},
              "uuid": "960a0eda-e3e3-44df-b159-357d18d0da5b",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for invalid hexadecimal strings",
              "fullTitle": "toNumber.js should return NaN for invalid hexadecimal strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"0x1g\")).to.be.NaN; // Invalid hexadecimal",
              "err": {},
              "uuid": "c5f5d4d0-73ab-49d9-9c35-31b96f1ac428",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for symbols",
              "fullTitle": "toNumber.js should return NaN for symbols",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(Symbol(\"symbol\"))).to.be.NaN;",
              "err": {},
              "uuid": "d3d080d3-9f80-4a94-89dd-1b73c4a24ca7",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects with valueOf method",
              "fullTitle": "toNumber.js should handle objects with valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = {\n    valueOf: () => 42\n};\nexpect(toNumber(obj)).to.equal(42);",
              "err": {},
              "uuid": "1b7d517e-5b78-4265-9227-b7631140d7a2",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle objects without valueOf method",
              "fullTitle": "toNumber.js should handle objects without valueOf method",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1 };\nexpect(toNumber(obj)).to.be.NaN;",
              "err": {},
              "uuid": "49271bc9-715f-4f8c-8a3d-b9d1f4dd9fa5",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle arrays",
              "fullTitle": "toNumber.js should handle arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber([42])).to.equal(42); // Single-element array\nexpect(toNumber([1, 2])).to.be.NaN; // Multi-element array",
              "err": {},
              "uuid": "6dc7e78a-2459-4590-bcb5-2f2e80f61484",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NaN for null or undefined",
              "fullTitle": "toNumber.js should return NaN for null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(null)).to.equal(0); // Special case: null is coerced to 0\nexpect(toNumber(undefined)).to.be.NaN;",
              "err": {},
              "uuid": "d9e1d9a6-0316-4157-998f-24d1017dee2b",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle edge cases with `0`",
              "fullTitle": "toNumber.js should handle edge cases with `0`",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(0)).to.equal(0); // 0 should remain 0\nexpect(toNumber(-0)).to.equal(-0); // -0 should remain -0",
              "err": {},
              "uuid": "9947ed9d-ba81-49a3-ac36-0186e4833eca",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty objects gracefully",
              "fullTitle": "toNumber.js should handle empty objects gracefully",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber({})).to.be.NaN;",
              "err": {},
              "uuid": "84c02133-c7c0-4189-abb0-09fa645ee808",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle very large numbers in strings",
              "fullTitle": "toNumber.js should handle very large numbers in strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toNumber(\"1e+30\")).to.equal(1e30); // Scientific notation",
              "err": {},
              "uuid": "61c0b897-4c8c-448c-9a1a-f9522ec8fb3d",
              "parentUUID": "9a12784f-d436-47a2-97e2-bab87ca97747",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "517004ea-925f-4148-bd3c-52bf6e415fee",
            "8664a177-8f84-4b9c-aa6f-03a98ab437f8",
            "5f6ea26b-e5b4-461a-9d5e-b00b2ec8f259",
            "c043d219-b3eb-4a5d-8fef-6cf4607ec708",
            "960a0eda-e3e3-44df-b159-357d18d0da5b",
            "c5f5d4d0-73ab-49d9-9c35-31b96f1ac428",
            "d3d080d3-9f80-4a94-89dd-1b73c4a24ca7",
            "1b7d517e-5b78-4265-9227-b7631140d7a2",
            "49271bc9-715f-4f8c-8a3d-b9d1f4dd9fa5",
            "6dc7e78a-2459-4590-bcb5-2f2e80f61484",
            "d9e1d9a6-0316-4157-998f-24d1017dee2b",
            "9947ed9d-ba81-49a3-ac36-0186e4833eca",
            "84c02133-c7c0-4189-abb0-09fa645ee808",
            "61c0b897-4c8c-448c-9a1a-f9522ec8fb3d"
          ],
          "failures": [
            "a8b264f4-1708-49b9-bdda-095188c3e996"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}